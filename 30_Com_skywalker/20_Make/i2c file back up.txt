/*******************************************************************************
 * \file    i2c.c
 * \brief   Init I2C 
 *
 * \section AUTHOR
 *    1. Gary.Weng
 *
 * \section SVN
 *  $Date: 2018-08-03 11:21:52 +0800 (Fri, 03 Aug 2018) $
 *  $Author: Jeff.Zhou $
 *  $Revision: 8 $
 *
 * \section LICENSE
 * Copyright (c) 2016 Delta Electronics (Hangzhou Design Center)
 * All rights reserved.
 ******************************************************************************/

/*******************************************************************************
 * Included header
 ******************************************************************************/
#include <StdPeriphDriver.h>
#include "global.h"
#include "RegBitDefs.h"

/* Module header */
#define I2C_EXPORT_H
  #include "i2c.h"
  #include "i2c_rte.h"
  #include "crc.h"
  #include "eeprom.h"
  #include "port.h" 
  #include "pmbus.h" 
  #include "pmbus_rte.h" 
  #include "rte.h"
	#include "nvic.h"

/*******************************************************************************
 * Global data
 ******************************************************************************/
volatile uint8 I2C_u8ExpTxCnt;
volatile uint8 I2C_u8ExpRxCnt;
volatile uint8 I2C_u8I2cRxCnt;
volatile uint8 I2C_u8I2cTxCnt;
volatile uint8 I2C_u8I2cTxLen;
volatile uint8 I2C_u8I2cRxLen;
volatile uint8 I2C_u8PEC;
volatile uint8 I2C_u8PecErrCmd;

#pragma udata BANK_PMB1 = 0x200
volatile uint8 I2C_au8I2cRxBuf[I2C_RX_BUF_SIZE];
#pragma udata BANK_PMB2 = 0x300
volatile uint8 I2C_au8I2cTxBuf[I2C_TX_BUF_SIZE];

/*******************************************************************************
 * Local constants and macros (private to module)
 ******************************************************************************/

#define MG_I2C_BASE_SLA_ADR        ((uint8)0x80) 
#define MG_I2C_SDA_LOW_TIME_OUT    ((uint16)350U) 
#define MG_I2C_SCL_LOW_TIME_OUT    ((uint16)350U)
/* I2C1 interrrput funtion */
#define I2C_vI2cIsr                I2C1_IRQHandler
/* I2C module register definition */
#define MG_I2C_TX_DATA_REG         I2C1->TXDR                   /* TX register */
#define MG_I2C_RX_DATA_REG         I2C1->RXDR                   /* RX register */
#define MG_I2C_RX_DATA_RDY_FLG     I2C_GetITStatus(I2C1,I2C_IT_RXNE)
#define MG_I2C_RX_CLR_DATA_RDY_FLG I2C_ClearITPendingBit(I2C1,I2C_IT_RXNE)
#define MG_I2C_RX_REG_OVR          I2C_GetITStatus(I2C1, I2C_IT_OVR)       /* RX register overrun error */
#define MG_I2C_RX_REG_CLR_OVR      I2C_ClearITPendingBit(I2C1, I2C_IT_OVR) /* RX register clear overrun error */
#define MG_I2C_RX_REG_ARLO         I2C_GetITStatus(I2C1, I2C_IT_ARLO)       /* Arbitration lost error */
#define MG_I2C_RX_REG_CLR_ARLO     I2C_ClearITPendingBit(I2C1, I2C_IT_ARLO) /* Clear Arbitration lost error */
#define MG_I2C_RX_REG_BERR         I2C_GetITStatus(I2C1, I2C_IT_BERR)       /* Bus error */
#define MG_I2C_RX_REG_CLR_BERR     I2C_ClearITPendingBit(I2C1, I2C_IT_BERR) /* Clear Bus error */
#define MG_I2C_IS_READ             I2C_GetTransferDirection(I2C1)    /* I2C read operation */
#define MG_I2C_RX_IS_DATA_SET_FLG  !(I2C_GetITStatus(I2C1, I2C_IT_ADDR))  /* I2C received address byte */
#define MG_I2C_RX_IS_ADDR_CLR_FLG  I2C_ClearITPendingBit(I2C1, I2C_IT_ADDR)  /* I2C received address byte */
#define MG_I2C_OWN_ADDR_DISABLE    I2C1->OAR1 &= ~I2C_OAR1_OA1EN /* I2C disable own address */
#define MG_I2C_OWN_ADDR_ENABLE     I2C1->OAR1 |= I2C_OAR1_OA1EN /* I2C enable own address */
#define MG_I2C_OWN_ADDR_CHANGE(X)  {I2C1->OAR1 &= 0xFFFFFF00;\
	                                  I2C1->OAR1 |= (uint32)(X);} /* I2C change own addr to X */
	
#define MG_I2C_STOP_IS_DETECT      I2C_GetITStatus(I2C1, I2C_IT_STOPF)
#define MG_I2C_STOP_IS_DETECT_CLR  I2C_ClearITPendingBit(I2C1, I2C_IT_STOPF)
//#define MG_I2C_PORT_OPEN           I2C_Cmd(I2C1, ENABLE)
//#define MG_I2C_PORT_CLOSE          I2C_Cmd(I2C1, DISABLE)

#define MG_I2C_STOP_DET_FLG        I2C_mg_u16I2cHwStatus.Bits.f0
#define MG_I2C_READ_FLG            I2C_mg_u16I2cHwStatus.Bits.f1

/*******************************************************************************
 * Local data types (private typedefs / structs / enums)
 ******************************************************************************/
typedef enum MG_E_I2C_STATE_
{
  MG_E_I2C_IDLE = 0,       
  MG_E_I2C_READ,           
  MG_E_I2C_WRITE,     
  MG_E_I2C_BLOCK_WRITE,       
} MG_E_I2C_STATE;

/*******************************************************************************
 * Local data (private to module)
 ******************************************************************************/

static GLOBAL_U_U8BIT  I2C_mg_u8I2cAddrWr;  
static GLOBAL_U_U8BIT  I2C_mg_u8I2cAddrWrOld;
static GLOBAL_U_U8BIT  I2C_mg_u8I2cAddrRd; 
static GLOBAL_U_U16BIT I2C_mg_u16I2cHwStatus;

static uint8 I2C_mg_u8I2cState;

/*******************************************************************************
 * Local function prototypes (private to module)
 ******************************************************************************/

//static void mg_I2cPrepareData( void );
//static void mg_I2cProcessData( void );
static void mg_vSetI2cAddress( uint8 u8Addr );
static void mg_vI2cReset( void );

/*******************************************************************************
 * Global data (public to other modules)
 ******************************************************************************/

volatile WORD_VAL  RTE_u16ComDebug[RTE_COM_DEBUG_REG_NUM];

/*******************************************************************************
 * Global functions (public to other modules)
 ******************************************************************************/

/********************************************************************************
 * \brief         Init I2C module. Reference Surin GEN1
 *
 * \param[in]     -
 * \param[in,out] -
 * \param[out]    -
 *
 * \return        -
 *
 *******************************************************************************/
void I2C_vI2cHwInit(void)
{
	I2C_InitTypeDef  I2C_InitStructure;
	

	
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE); /*Enable I2C1 clock*/
	//I2C_DeInit(I2C1);   
  /*Config I2C_initStructure*/
	I2C_InitStructure.I2C_Timing = 0;
	I2C_InitStructure.I2C_AnalogFilter = I2C_AnalogFilter_Enable;
	I2C_InitStructure.I2C_DigitalFilter = 0;
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_OwnAddress1 = MG_I2C_BASE_SLA_ADR;
	I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	/*Init I2C interface*/
	I2C_Init(I2C1, &I2C_InitStructure);
	I2C_StretchClockCmd(I2C1,ENABLE);
	/*Enable I2C interface*/
	I2C_Cmd(I2C1, ENABLE);
	/*Enable I2C interrupt flag*/
	I2C_ITConfig(I2C1, I2C_IT_RXI, ENABLE);   //   | I2C_CR1_TXIE
	I2C_ITConfig(I2C1, I2C_IT_ADDRI, ENABLE);
	I2C_ITConfig(I2C1, I2C_IT_STOPI, ENABLE);
} /* I2C_vI2cHwInit() */

/********************************************************************************
 * \brief         Init I2C module.
 *
 * \param[in]     -
 * \param[in,out] -
 * \param[out]    -
 *
 * \return        -
 *
 *******************************************************************************/
void I2C_vI2cDataInit(void)
{
  uint8 u8Cnt;

  for (u8Cnt = 0; u8Cnt < I2C_RX_BUF_SIZE; u8Cnt++) 
  {
    I2C_au8I2cRxBuf[u8Cnt] = 0x00;
  }
  
  for (u8Cnt = 0; u8Cnt < I2C_TX_BUF_SIZE; u8Cnt++)
  {
    I2C_au8I2cTxBuf[u8Cnt] = 0x00;
  }

  I2C_u8PEC = 0;
  I2C_u8PecErrCmd = 0;
  I2C_u8I2cTxLen = 0;
  I2C_u8I2cTxCnt = 0;
  I2C_u8I2cRxCnt = 0;
  I2C_u8ExpTxCnt = 0;
  I2C_u8ExpRxCnt = 0; 
  RTE_u16I2cStatus0.ALL = 0;

} /* I2C_vI2cDataInit() */

/********************************************************************************
 * \brief         if the slave address is not fixed check 
 *                the address every 10ms in schm.c.
 * \param[in]     u8DlyEn   Delay is for anti-shake
 * \param[in,out] -
 * \param[out]    -
 *
 * \return        -
 *
 *******************************************************************************/
#if I2C_FIX_SLA_ADDR

#else

void I2C_vUpdateI2cAddress( uint8 u8DlyEn )
{
  static uint8  u8AddrMatchDly = 0;

  I2C_mg_u8I2cAddrWr.Bits.f1 = RTE_COM_A0_FLG; 
  I2C_mg_u8I2cAddrWr.Bits.f2 = RTE_COM_A1_FLG; 
  I2C_mg_u8I2cAddrWr.Bits.f3 = 0;

  if (FALSE == u8DlyEn) 
  {
    mg_vSetI2cAddress( I2C_mg_u8I2cAddrWr.ALL );
    I2C_mg_u8I2cAddrRd.ALL = I2C_mg_u8I2cAddrWr.ALL + 1;
    I2C_mg_u8I2cAddrWrOld.ALL = I2C_mg_u8I2cAddrWr.ALL;
  }
  else 
  {
    if (I2C_mg_u8I2cAddrWrOld.ALL != I2C_mg_u8I2cAddrWr.ALL) 
    {
      if (u8AddrMatchDly > 30)
      { /*delay 200ms */
        I2C_mg_u8I2cAddrWrOld.ALL = I2C_mg_u8I2cAddrWr.ALL;
        I2C_mg_u8I2cAddrRd.ALL = I2C_mg_u8I2cAddrWr.ALL + 1;
        mg_vSetI2cAddress( I2C_mg_u8I2cAddrWr.ALL );
      }
      else
      {
        u8AddrMatchDly ++;
      }
    }
    else
    {
      u8AddrMatchDly = 0;
    }
  }  
}
#endif

/********************************************************************************
 * \brief         I2C timeout handler. called in schm.c every 100us.
 *                check if I2C bus hung up (SCL or SDA low for 35ms)
 *                if yes:
 *                release the bus of the I2C interface by reseting module
 * \param[in]     -
 * \param[in,out] -
 * \param[out]    -
 *
 * \return        -
 *
 *******************************************************************************/
void I2C_vI2cTimeOutHandler(void)
{
  static uint16 u16SclLowCnt = 0U;
  static uint16 u16SdaLowCnt = 0U;

  RTE_I2C_RESET_FLG = FALSE;

  /* I2C Reset Pin check */
  if ((RTE_I2C_MUX_RESET) 
    && (!RTE_I2C_MUX_RESET_OLD)) 
  {
    RTE_I2C_RESET_FLG = TRUE;
  }
  RTE_I2C_MUX_RESET_OLD = RTE_I2C_MUX_RESET;

  /* SCL status check */
  if (PORT_SCL_LOW)
  {
    if (u16SclLowCnt < MG_I2C_SCL_LOW_TIME_OUT)
    {
      u16SclLowCnt++;
    }
    else
    {
      u16SclLowCnt = 0;
      RTE_I2C_RESET_FLG = TRUE;
    }
  }
  else
  {
    u16SclLowCnt = 0;
  }

  /* SDA status check */
  if (PORT_SDA_LOW)
  {
    if (u16SdaLowCnt < MG_I2C_SDA_LOW_TIME_OUT)
    {
      u16SdaLowCnt++;
    }
    else
    {
      u16SdaLowCnt = 0;
      RTE_I2C_RESET_FLG = TRUE;
    }
  }
  else
  {
    u16SdaLowCnt = 0;
  }

  /* Reset I2C module to release lines */
  if (TRUE == RTE_I2C_RESET_FLG)
  {
    mg_vI2cReset();
  }

} /* I2C_vI2cTimeOutHandler */

/********************************************************************************
 * \brief         I2C interrupt. called in int.c when there is an interrupt.
 *
 * \param[in]     -
 * \param[in,out] -
 * \param[out]    -
 *
 * \return        -
 *
 *******************************************************************************/
void I2C1_IRQHandler( void ) 
{
	if (MG_I2C_RX_REG_OVR)          /* Overrun error detect */
	{
		MG_I2C_RX_REG_CLR_OVR;        /* clear interrupt flag */
		//return;
	}
	if (MG_I2C_RX_REG_ARLO)          /* Arbitration lost interrupt */
	{
		MG_I2C_RX_REG_CLR_ARLO;        /* clear interrupt flag */
		//return;
	}
	if (MG_I2C_RX_REG_BERR)          /* Bus error interrupt */
	{
		MG_I2C_RX_REG_CLR_BERR;        /* clear interrupt flag */
		//return;
	}
	
	if(!MG_I2C_RX_IS_DATA_SET_FLG)
	{
		MG_I2C_RX_IS_ADDR_CLR_FLG;
	  uint8 mg_u8Data = MG_I2C_RX_DATA_REG;
	}
	
	if(MG_I2C_RX_DATA_RDY_FLG)
	{
		uint8 mg_u8Data = MG_I2C_RX_DATA_REG;         /* Get received byte, reset RBF flag */; 
		MG_I2C_RX_CLR_DATA_RDY_FLG;
																								
		MG_I2C_STOP_DET_FLG = 0;
		MG_I2C_READ_FLG = 0;

		if (I2C_mg_u8I2cState == MG_E_I2C_IDLE)
		{
			I2C_u8I2cTxLen = 0;
			I2C_u8I2cTxCnt = 0;
			I2C_u8I2cRxCnt = 0;
			I2C_u8ExpTxCnt = 0;
			I2C_u8ExpRxCnt = 0; 
			I2C_u8PEC = 0;
		} 


		/* Select between read and write */
		if (MG_I2C_IS_READ)
		{
			/* Read operation, output from slave */
			MG_I2C_READ_FLG = 1;

			if (MG_I2C_RX_IS_DATA_SET_FLG) 
			{
				/* Last received byte is data */
				if ((I2C_u8I2cTxLen) 
					&& (I2C_u8I2cTxCnt <= I2C_u8I2cTxLen)) 
				{
					if (I2C_u8I2cTxCnt == I2C_u8I2cTxLen) 
					{ 
						#if PEC_ENABLE
							I2C_au8I2cTxBuf[I2C_u8I2cTxCnt] = I2C_u8PEC;
						#else
							I2C_au8I2cTxBuf[I2C_u8I2cTxCnt] = I2C_DEFAULT_VAL;
						#endif
					}
					MG_I2C_TX_DATA_REG = I2C_au8I2cTxBuf[I2C_u8I2cTxCnt++];  
				} /* end else */ 
				else
				{
					MG_I2C_TX_DATA_REG = I2C_DEFAULT_VAL;
				}
			}
			else 
			{ 
				MG_I2C_RX_IS_ADDR_CLR_FLG;
				/* Last received byte is slave address */
				I2C_u8I2cTxLen = 0;
				I2C_u8I2cTxCnt = 0; 

				#if PEC_ENABLE
					I2C_u8PEC = CRC_u8GetCrc8(I2C_u8PEC, I2C_mg_u8I2cAddrRd.ALL);
				#endif 

				if (RTE_I2C_CMD_DETECTED) {      
					PMBUS_vSendData();
				}
				I2C_mg_u8I2cState = MG_E_I2C_READ;
				if (0U == I2C_u8I2cTxLen) 
				{ 
					I2C_au8I2cTxBuf[I2C_u8I2cTxCnt] = I2C_DEFAULT_VAL;
				}
				MG_I2C_TX_DATA_REG = I2C_au8I2cTxBuf[I2C_u8I2cTxCnt++];
			}

			/* Calculate the PEC if supported */
			#if PEC_ENABLE
				I2C_u8PEC = CRC_u8GetCrc8(I2C_u8PEC, MG_I2C_TX_DATA_REG); 
			#endif    
		}
		else
		{
			/* Write operation, input to slave */
			if (MG_I2C_RX_IS_DATA_SET_FLG) 
			{
				/* Calculate the PEC if supported */
				#if PEC_ENABLE
					I2C_u8PEC = CRC_u8GetCrc8(I2C_u8PEC, mg_u8Data); 
				#endif 

				/* Last received byte is data */
				if (I2C_mg_u8I2cState == MG_E_I2C_WRITE)
				{
					if (I2C_u8I2cRxCnt < I2C_RX_BUF_SIZE) 
					{
						I2C_au8I2cRxBuf[I2C_u8I2cRxCnt++] = mg_u8Data;
						PMBUS_vCmdCheck();
					}
				}
				else if (I2C_mg_u8I2cState == MG_E_I2C_BLOCK_WRITE)
				{
					I2C_u8ExpRxCnt = mg_u8Data + 2;    // Block Write, Page_Plus_Wr/Rd: cmd + cnt 
	//      fPMB_BLOCK_WRITE = TRUE;
					I2C_au8I2cRxBuf[I2C_u8I2cRxCnt++] = mg_u8Data;
					I2C_mg_u8I2cState = MG_E_I2C_WRITE;
				}
			}
			else 
			{ 
				MG_I2C_RX_IS_ADDR_CLR_FLG;
				/* Slave address match and slave ACK */
				if (I2C_mg_u8I2cState != MG_E_I2C_IDLE) 
				{ 
					/* Cmd process not finished then next cmd is coming , or page and write/read */
					if ((I2C_mg_u8I2cState == MG_E_I2C_READ)
						|| (I2C_mg_u8I2cState == MG_E_I2C_WRITE)
						|| (I2C_mg_u8I2cState == MG_E_I2C_BLOCK_WRITE)) 
					{
						RTE_I2C_CMD_WAIT_FLG = TRUE;
						I2C_vProcessReceiveData();
					}
					I2C_u8I2cTxLen = 0;
					I2C_u8I2cTxCnt = 0;
					I2C_u8I2cRxCnt = 0;
				} // end if

				/* Calculate the PEC if supported */
				#if PEC_ENABLE
				I2C_u8PEC = CRC_u8GetCrc8(0x00, I2C_mg_u8I2cAddrWr.ALL);
				#endif

				I2C_mg_u8I2cState = MG_E_I2C_WRITE;
			}
		}
	}
  //I2C_StretchClockCmd(I2C1,ENABLE);
} /* I2C_vI2cIsr */

/********************************************************************************
 * \brief         Detect Stop bit and check wait flag to handle received frame 
 *
 * \param[in]     -
 * \param[in,out] -
 * \param[out]    -
 *
 * \return        -
 *
 *******************************************************************************/
void I2C_vProcessReceiveData( void )
{
  if ((MG_I2C_STOP_IS_DETECT)
    || RTE_I2C_CMD_WAIT_FLG) 
  {
		if(MG_I2C_STOP_IS_DETECT)
		{
		  MG_I2C_STOP_IS_DETECT_CLR;
		}
    RTE_I2C_CMD_DETECTED = 0;

    if ((I2C_u8I2cRxCnt > 0) 
      && ((I2C_mg_u8I2cState == I2C_STATE_WRITE_REQ) 
        || (I2C_mg_u8I2cState == I2C_STATE_BLOCK_WRITE))) 
    {      
      NVIC_I2C1_INT_DISABLE();                        /* Disable I2C interrupt */

#if PEC_ENABLE
      if (I2C_u8I2cRxCnt == I2C_u8ExpRxCnt + 1)  /* Correct byte count */
#else 
      if (I2C_u8I2cRxCnt == I2C_u8ExpRxCnt)
#endif
//      || (PMBUS_CMD == PMB_F5_DEBUG_REG)) 
      {
        if (0U == I2C_u8PEC) 
        { /* PEC is correct */
          vPMBus_HandleData(); 
      
          if (ON == RTE_I2C_PEC_ERR_FLG) {
            RTE_I2C_PEC_ERR_FLG = OFF;
            RTE_I2C_PEC_CHANGE_FLG = TRUE;
          }
        }
        else 
        {
          if (OFF == RTE_I2C_PEC_ERR_FLG) 
          { 
            RTE_I2C_PEC_ERR_FLG = TRUE;
            RTE_I2C_PEC_CHANGE_FLG = TRUE;
            I2C_u8PecErrCmd = RTE_u8PMBusCommand;
          }            
        }
      }

#if I2C_CMD_DATA_VALID_CHECK
      else 
      {  
        /* send two many or two few byte count */
        if (I2C_u8ExpRxCnt == 0) {
          fPMB_INVALID_CMD = 1;
        }
        else 
        { 
          if ((!fPMB_INVALID_CMD)           /* cmd is supported */
            && (I2cRxCnt > I2cExpRxCnt))
          {  /* Host sends too many bytes */
            fPMB_INVALID_DATA = 1;	
          }
        }
      } 
#endif

      I2C_u8I2cRxCnt = 0;
      NVIC_I2C1_INT_DISABLE();               /* Enable I2C interrupt */
    } 

    
    I2C_mg_u8I2cState = I2C_STATE_IDLE;  
    RTE_I2C_CMD_WAIT_FLG = 0;
  } // end if
} /* I2C_vProcessReceiveData() */


/*******************************************************************************
 * Local functions (private to module)
 ******************************************************************************/

/********************************************************************************
 * \brief         reset I2C module when error occurs.
 * \param[in]     -
 * \param[in,out] -
 * \param[out]    -
 *
 * \return        -
 *
 *******************************************************************************/
static void mg_vI2cReset( void )
{
  I2C_SoftwareResetCmd(I2C1);
} /* mg_vI2cReset() */

/********************************************************************************
 * \brief         set I2C slave address
 * \param[in]     -
 * \param[in,out] -
 * \param[out]    -
 *
 * \return        -
 *
 *******************************************************************************/
static void mg_vSetI2cAddress( uint8 u8Addr )
{
  MG_I2C_OWN_ADDR_DISABLE;   //Address bits can be written only when OA1EN=0(DISABLE).
  MG_I2C_OWN_ADDR_CHANGE(u8Addr);   
  MG_I2C_OWN_ADDR_ENABLE;   //After change the Addr, set OA1EN=1(ENABLE). This operation only supply on STM32 MCU
}



/* 
 * End of file
 */