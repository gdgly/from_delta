<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\20_Make\output\Skywalker_4000W_Com_V.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\20_Make\output\Skywalker_4000W_Com_V.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Jan 11 21:21:21 2020
<BR><P>
<H3>Maximum Stack Usage =        436 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; SCHM_vSchmIdleLoop &rArr; SCHM_vSchmRoutine &rArr; BLABOX_vProcessBlackbox &rArr; MEM_vWrite2EEPORM &rArr; MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[22]">CEC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from i2cprt.o(i.I2C1_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1d]">I2C2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[27]">RCC_APB1PeriphClockCmd</a> from stdperiphdriver.o(i.RCC_APB1PeriphClockCmd) referenced 4 times from pwm.o(.constdata)
 <LI><a href="#[26]">RCC_APB2PeriphClockCmd</a> from stdperiphdriver.o(i.RCC_APB2PeriphClockCmd) referenced 3 times from pwm.o(.constdata)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1e]">SPI1_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1f]">SPI2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from clock.o(i.SystemInit) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[2c]">TEMPCTRL_Rte_Read_R_u161mVLlcNtc</a> from tempctrl.o(i.TEMPCTRL_Rte_Read_R_u161mVLlcNtc) referenced from tempctrl.o(.constdata)
 <LI><a href="#[2b]">TEMPCTRL_Rte_Read_R_u161mVPfcNtc</a> from tempctrl.o(i.TEMPCTRL_Rte_Read_R_u161mVPfcNtc) referenced from tempctrl.o(.constdata)
 <LI><a href="#[2d]">TEMPCTRL_Rte_Read_R_u161mVSrNtc</a> from tempctrl.o(i.TEMPCTRL_Rte_Read_R_u161mVSrNtc) referenced from tempctrl.o(.constdata)
 <LI><a href="#[29]">TEMPCTRL_SCFG_u16ReadInletNtc</a> from tempctrl.o(i.TEMPCTRL_SCFG_u16ReadInletNtc) referenced from tempctrl.o(.constdata)
 <LI><a href="#[2a]">TEMPCTRL_SCFG_u16ReadOutletNtc</a> from tempctrl.o(i.TEMPCTRL_SCFG_u16ReadOutletNtc) referenced from tempctrl.o(.constdata)
 <LI><a href="#[18]">TIM14_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[19]">TIM15_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1a]">TIM16_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[1b]">TIM17_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[e]">TS_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[28]">UARTPRT_vUsartIrqHandler</a> from uartprt.o(i.UARTPRT_vUsartIrqHandler) referenced 2 times from uart.o(.constdata)
 <LI><a href="#[20]">USART1_IRQHandler</a> from uart.o(i.USART1_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[21]">USART2_IRQHandler</a> from uart.o(i.USART2_IRQHandler) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f0xx.o(.text) referenced from startup_stm32f0xx.o(RESET)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f0xx.o(.text)
 <LI><a href="#[23]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[1c7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[32]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ca]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1cb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1cc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1cd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vPwmDutyUpdate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateIin
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vSaveHoursUsed
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom1RxData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_AdjSpeed
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32ReadBuffer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalcV1CurrentGain
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1cf]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>ADC_ChannelConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stdperiphdriver.o(i.ADC_ChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[3f]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stdperiphdriver.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[42]"></a>ADC_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stdperiphdriver.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[3a]"></a>ADC_DMARequestModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stdperiphdriver.o(i.ADC_DMARequestModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[33]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stdperiphdriver.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[3e]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stdperiphdriver.o(i.ADC_GetCalibrationFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_GetCalibrationFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[40]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, stdperiphdriver.o(i.ADC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[3c]"></a>ADC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stdperiphdriver.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[41]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stdperiphdriver.o(i.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[3b]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stdperiphdriver.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[35]"></a>ADC_vInit</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, adc.o(i.ADC_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ADC_vInit &rArr; ADC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestModeConfig
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[6b]"></a>ADC_vReadRaw</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.ADC_vReadRaw))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliFast
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_SCFG_vReadValue
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_SCFG_u16ReadOutletNtc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_SCFG_u16ReadInletNtc
</UL>

<P><STRONG><a name="[147]"></a>BLABOX_vClearFault</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, blabox.o(i.BLABOX_vClearFault))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[4d]"></a>BLABOX_vClearWarning</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, blabox.o(i.BLABOX_vClearWarning))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLABOX_vClearWarning &rArr; BLABOX_Rte_Read_B_R_FAN_WARN
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_TEMP_WARN
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_IOUT_WARN
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_FAN_WARN
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[189]"></a>BLABOX_vCountRealTimeClockDataSystemBlackbox</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, blabox.o(i.BLABOX_vCountRealTimeClockDataSystemBlackbox))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[50]"></a>BLABOX_vInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, blabox.o(i.BLABOX_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = BLABOX_vInit &rArr; MEM_vRead2EEPORM &rArr; MEM_SCFG_vReadMem &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vRead2EEPORM
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_u16Getlenght
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[52]"></a>BLABOX_vMFR_CheckACBlackBox</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, blabox.o(i.BLABOX_vMFR_CheckACBlackBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BLABOX_vMFR_CheckACBlackBox &rArr; mg_vMfrSetACCntBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrSetACCntBlackBox
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_AUX_MODE
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_AC_POWER_FAULT
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[56]"></a>BLABOX_vMFR_CheckPSONBlackBox</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, blabox.o(i.BLABOX_vMFR_CheckPSONBlackBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BLABOX_vMFR_CheckPSONBlackBox &rArr; mg_vMfrSetPSONCntBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrSetPSONCntBlackBox
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_PSON_FAULT
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_AUX_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[59]"></a>BLABOX_vMFR_ClearBlackBox</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, blabox.o(i.BLABOX_vMFR_ClearBlackBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BLABOX_vMFR_ClearBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrBlaboxHeader
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPMBus_HandleData
</UL>

<P><STRONG><a name="[5b]"></a>BLABOX_vMFR_SystemBlackBox</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, blabox.o(i.BLABOX_vMFR_SystemBlackBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BLABOX_vMFR_SystemBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrBlaboxHeader
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPMBus_HandleData
</UL>

<P><STRONG><a name="[5c]"></a>BLABOX_vMFR_TimePSONBlackBox</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, blabox.o(i.BLABOX_vMFR_TimePSONBlackBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = BLABOX_vMFR_TimePSONBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrBlaboxHeader
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Write
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_PSON_FAULT
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_AUX_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[5d]"></a>BLABOX_vProcessBlackbox</STRONG> (Thumb, 1674 bytes, Stack size 16 bytes, blabox.o(i.BLABOX_vProcessBlackbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = BLABOX_vProcessBlackbox &rArr; MEM_vWrite2EEPORM &rArr; MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_u8ReadFanBitFail
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vWrite2EEPORM
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSetCountEventFaultAndWarning
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vPushEventFaultBlackBox
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_u8IsMaxCountEventFaultAndWarning
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_u32GetLastRecordId
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_u16Getlenght
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Read
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_OT_FAULT
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_LOSS_INPUT
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_IOUT_OC_FAULT
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_AUX_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[66]"></a>BLABOX_vSetEnableBlackbox</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, blabox.o(i.BLABOX_vSetEnableBlackbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BLABOX_vSetEnableBlackbox &rArr; BLABOX_SCFG_Write &rArr; S_DAM_bWrite &rArr; S_DAM_SCFG_bWrite &rArr; MEM_vWriteToMem
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPMBus_HandleData
</UL>

<P><STRONG><a name="[1c6]"></a>BLABOX_vSetRealTimeClockDataSystemBlackbox</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, blabox.o(i.BLABOX_vSetRealTimeClockDataSystemBlackbox))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPMBus_HandleData
</UL>

<P><STRONG><a name="[173]"></a>BUFFER_SCB_vInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_SCB_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[67]"></a>BUFFER_SCB_vLoop10msTask</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, buffer.o(i.BUFFER_SCB_vLoop10msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BUFFER_SCB_vLoop10msTask &rArr; BUFFER_SCFG_vReadValue &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_SCFG_vReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[69]"></a>BUFFER_SCB_vLoop1msTask</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, buffer.o(i.BUFFER_SCB_vLoop1msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BUFFER_SCB_vLoop1msTask &rArr; BUFFER_SCFG_vReadValue &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_SCFG_vReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[1aa]"></a>BUFFER_u16GetMean10ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_u16GetMean10ms))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_AdjSpeed
</UL>

<P><STRONG><a name="[128]"></a>BUFFER_u16GetMean1ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, buffer.o(i.BUFFER_u16GetMean1ms))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopyDebugData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateVsb
</UL>

<P><STRONG><a name="[6e]"></a>CALI_vCalcCaliPara</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, cali.o(i.CALI_vCalcCaliPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CALI_vCalcCaliPara
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_Rte_Read_R_u1610mAIoutAvg
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[70]"></a>CALI_vCaliFast</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, cali.o(i.CALI_vCaliFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CALI_vCaliFast &rArr; mg_s32GetCalibratedData
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_s32GetCalibratedData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vReadRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[72]"></a>CALI_vCaliHandler</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, cali.o(i.CALI_vCaliHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CALI_vCaliHandler &rArr; mg_vSaveCaliData &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveCaliData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCopyCaliData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateVsb
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateVin
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateV1Sense
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateV1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibratePin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateIin
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateIShave
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[7c]"></a>CALI_vCalibrateIShare</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, cali.o(i.CALI_vCalibrateIShare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CALI_vCalibrateIShare
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_Rte_Read_R_u1610mAIoutAvg
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[7d]"></a>CALI_vCalibrateV1</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cali.o(i.CALI_vCalibrateV1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CALI_vCalibrateV1 &rArr; mg_vCalibrateV1 &rArr; mg_s32GetCalibratedData
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateV1
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vSaveBlackBoxData2Buff
</UL>

<P><STRONG><a name="[7e]"></a>CALI_vInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, cali.o(i.CALI_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = CALI_vInit &rArr; mg_vReadEepData &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSetDefaultCaliData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadEepData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalcV1CurrentGain
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[82]"></a>CLOCK_vInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, clock.o(i.CLOCK_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_vInit &rArr; SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[190]"></a>CRC_u16GetCrc16</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, crc.o(i.CRC_u16GetCrc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_u16GetCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vUsartIrqHandler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vTxData
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_SCFG_u32Crc
</UL>

<P><STRONG><a name="[6d]"></a>CRC_u8GetCrc8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, crc.o(i.CRC_u8GetCrc8))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_SCFG_u8GetCrc8
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_SCFG_u8GetCrc8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_u8GetCrc8
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECATL_SCFG_u8GetCrc8
</UL>

<P><STRONG><a name="[172]"></a>CRC_vInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crc.o(i.CRC_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[39]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stdperiphdriver.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[37]"></a>DMA_DeInit</STRONG> (Thumb, 342 bytes, Stack size 0 bytes, stdperiphdriver.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[38]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stdperiphdriver.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[83]"></a>EEPROM_u32ReadBuffer</STRONG> (Thumb, 714 bytes, Stack size 40 bytes, eeprom.o(i.EEPROM_u32ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_u32TimeoutUserCallback
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferHandling
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadEepData
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vReadMem
</UL>

<P><STRONG><a name="[8a]"></a>EEPROM_u32WaitEepromStandbyState</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, eeprom.o(i.EEPROM_u32WaitEepromStandbyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EEPROM_u32WaitEepromStandbyState &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_u32TimeoutUserCallback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferHandling
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WriteBuffer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveCaliData
</UL>

<P><STRONG><a name="[8c]"></a>EEPROM_u32WriteBuffer</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, eeprom.o(i.EEPROM_u32WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WritePage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WaitEepromStandbyState
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_u32TimeoutUserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveCaliData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vWriteMem
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECATL_SCFG_vWriteMem
</UL>

<P><STRONG><a name="[8d]"></a>EEPROM_u32WritePage</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, eeprom.o(i.EEPROM_u32WritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_u32TimeoutUserCallback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferHandling
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WriteBuffer
</UL>

<P><STRONG><a name="[174]"></a>EEPROM_vInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eeprom.o(i.EEPROM_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[12a]"></a>FANCTRL_u16ReadFanCtrlDuty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fanctrl.o(i.FANCTRL_u16ReadFanCtrlDuty))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopyDebugData
</UL>

<P><STRONG><a name="[11c]"></a>FANCTRL_u16ReadFanSpeed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fanctrl.o(i.FANCTRL_u16ReadFanSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_u16ReadFanSpeed
</UL>

<P><STRONG><a name="[62]"></a>FANCTRL_u8ReadFanBitFail</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fanctrl.o(i.FANCTRL_u8ReadFanBitFail))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vLedControl
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_vNtcTempMonitor
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_u8ReadFanBitFail
</UL>

<P><STRONG><a name="[44]"></a>FANCTRL_u8ReadFanBitWarn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fanctrl.o(i.FANCTRL_u8ReadFanBitWarn))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_u8ReadFanBitWarn
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_FAN_WARN
</UL>

<P><STRONG><a name="[1af]"></a>FANCTRL_u8WriteFanBitFail</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fanctrl.o(i.FANCTRL_u8WriteFanBitFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FANCTRL_u8WriteFanBitFail
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vClearFaultBit
</UL>

<P><STRONG><a name="[1b0]"></a>FANCTRL_u8WriteFanBitWarn</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fanctrl.o(i.FANCTRL_u8WriteFanBitWarn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FANCTRL_u8WriteFanBitWarn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vClearFaultBit
</UL>

<P><STRONG><a name="[95]"></a>FANCTRL_vFanCtrl</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fanctrl.o(i.FANCTRL_vFanCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FANCTRL_vFanCtrl &rArr; mg_AdjSpeed &rArr; FANCTRL_Rte_Read_R_s32TempDiff &rArr; FANCTRL_SCFG_s16ReadSecRecdiode
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_AdjSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[188]"></a>FANCTRL_vFanSpeedCalc</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, fanctrl.o(i.FANCTRL_vFanSpeedCalc))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[179]"></a>FANCTRL_vInit</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, fanctrl.o(i.FANCTRL_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[122]"></a>FANCTRL_vSetFanBlockTest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fanctrl.o(i.FANCTRL_vSetFanBlockTest))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_vSetFanBlockTest
</UL>

<P><STRONG><a name="[124]"></a>FANCTRL_vSysSetFanCtrlDuty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fanctrl.o(i.FANCTRL_vSysSetFanCtrlDuty))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_vSysSetFanCtrlDuty
</UL>

<P><STRONG><a name="[97]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stdperiphdriver.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8ErasePageFlash
</UL>

<P><STRONG><a name="[9b]"></a>FLASH_GetStatus</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stdperiphdriver.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a0]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stdperiphdriver.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8WriteWordFlash
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8WriteHalfWordFlash
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8ErasePageFlash
</UL>

<P><STRONG><a name="[99]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stdperiphdriver.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8WriteHalfWordFlash
</UL>

<P><STRONG><a name="[9a]"></a>FLASH_ProgramWord</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stdperiphdriver.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8WriteWordFlash
</UL>

<P><STRONG><a name="[9f]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stdperiphdriver.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8WriteWordFlash
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8WriteHalfWordFlash
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8ErasePageFlash
</UL>

<P><STRONG><a name="[98]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stdperiphdriver.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[9c]"></a>FLASH_u32BootloaderFwVer</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, flash.o(i.FLASH_u32BootloaderFwVer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_u32BootloaderFwVer &rArr; FLASH_u32ReadWordFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u32ReadWordFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadFwRevData
</UL>

<P><STRONG><a name="[9d]"></a>FLASH_u32ReadWordFlash</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash.o(i.FLASH_u32ReadWordFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_u32ReadWordFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCheckBootMode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u32BootloaderFwVer
</UL>

<P><STRONG><a name="[9e]"></a>FLASH_u8ErasePageFlash</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, flash.o(i.FLASH_u8ErasePageFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FLASH_u8ErasePageFlash &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCheckBootMode
</UL>

<P><STRONG><a name="[a1]"></a>FLASH_u8WriteHalfWordFlash</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, flash.o(i.FLASH_u8WriteHalfWordFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_u8WriteHalfWordFlash &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCheckBootMode
</UL>

<P><STRONG><a name="[a2]"></a>FLASH_u8WriteWordFlash</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, flash.o(i.FLASH_u8WriteWordFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FLASH_u8WriteWordFlash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCheckBootMode
</UL>

<P><STRONG><a name="[16c]"></a>FLASH_vInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flash.o(i.FLASH_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[a3]"></a>FLASH_vRemapVectorTable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, flash.o(i.FLASH_vRemapVectorTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_vRemapVectorTable
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_MemoryRemapConfig
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stdperiphdriver.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vInit
</UL>

<P><STRONG><a name="[133]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stdperiphdriver.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vInit
</UL>

<P><STRONG><a name="[d0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdperiphdriver.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vI2cTimeOutHandler
</UL>

<P><STRONG><a name="[17d]"></a>HWIO_vCheckBootLoaderExistFlg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hwio.o(i.HWIO_vCheckBootLoaderExistFlg))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[170]"></a>HWIO_vInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hwio.o(i.HWIO_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[a5]"></a>HWIO_vReadGpioPort</STRONG> (Thumb, 496 bytes, Stack size 8 bytes, hwio.o(i.HWIO_vReadGpioPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HWIO_vReadGpioPort &rArr; PORT_u8ReadGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_u8ReadGpioPin
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_RTE_Write_B_P_VIN_OK_ACTIVE
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_RTE_Write_B_P_PSON_ACTIVE
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_RTE_Write_B_P_I2C_ADDRESS1
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_RTE_Write_B_P_I2C_ADDRESS0
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_RTE_Write_B_P_54V_FAULT_ACTIVE
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[ac]"></a>HWIO_vSetGpioPort</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, hwio.o(i.HWIO_vSetGpioPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HWIO_vSetGpioPort &rArr; PORT_vSetGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vSetGpioPin
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_Rte_Read_B_R_VIN_OK
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_Rte_Read_B_R_VIN_LINE_LOW
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_Rte_Read_B_R_V1_ON
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_Rte_Read_B_R_SMBALLERT_ST
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_Rte_Read_B_R_OUTPUT_OK
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_Rte_Read_B_R_COM_VIN_OK
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_RTE_Write_B_P_VINOK_ENA
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 646 bytes, Stack size 32 bytes, i2cprt.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = I2C1_IRQHandler &rArr; I2CPRT_vProcessReceiveData &rArr; vPMBus_HandleData &rArr; BLABOX_vMFR_SystemBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vSendData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCmdCheck
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_SCFG_u8GetCrc8
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8TxBuf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8I2cTxLen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8I2cRxCnt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8I2cPEC
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8I2cExpTxCnt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8I2cExpRxCnt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Read_R_u8I2cRxCnt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Read_R_u8I2cPEC
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_RTE_Write_B_P_CMD_WAIT_FLG
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vClearTimeoutCnt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetTransferDirection
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>I2CPRT_vInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, i2cprt.o(i.I2CPRT_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2CPRT_vInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8TxBuf
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8PecErrCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8I2cTxLen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8I2cRxCnt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8I2cPEC
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8I2cExpTxCnt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8I2cExpRxCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[c0]"></a>I2CPRT_vProcessReceiveData</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, i2cprt.o(i.I2CPRT_vProcessReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = I2CPRT_vProcessReceiveData &rArr; vPMBus_HandleData &rArr; BLABOX_vMFR_SystemBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPMBus_HandleData
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_SCFG_eGetRxSTOPFlg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8PecErrCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Write_P_u8I2cRxCnt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Read_R_u8I2cRxCnt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_Rte_Read_R_u8I2cPEC
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_RTE_Write_B_P_PEC_ERR_FLG
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_RTE_Write_B_P_PEC_CHANGE_FLG
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_RTE_Write_B_P_CMD_WAIT_FLG
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_RTE_Read_B_R_PEC_ERR_FLG
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vEnableNvicInt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vDisableNvicInt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>I2C_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stdperiphdriver.o(i.I2C_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WritePage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WaitEepromStandbyState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32ReadBuffer
</UL>

<P><STRONG><a name="[b6]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stdperiphdriver.o(i.I2C_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stdperiphdriver.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vI2cReset
</UL>

<P><STRONG><a name="[8b]"></a>I2C_GenerateSTART</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stdperiphdriver.o(i.I2C_GenerateSTART))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WaitEepromStandbyState
</UL>

<P><STRONG><a name="[86]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stdperiphdriver.o(i.I2C_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WritePage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WaitEepromStandbyState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32ReadBuffer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_SCFG_eGetRxSTOPFlg
</UL>

<P><STRONG><a name="[bc]"></a>I2C_GetTransferDirection</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stdperiphdriver.o(i.I2C_GetTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_GetTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>I2C_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdperiphdriver.o(i.I2C_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vInit
</UL>

<P><STRONG><a name="[1b4]"></a>I2C_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stdperiphdriver.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vI2cReset
</UL>

<P><STRONG><a name="[88]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stdperiphdriver.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32ReadBuffer
</UL>

<P><STRONG><a name="[87]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stdperiphdriver.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WritePage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32ReadBuffer
</UL>

<P><STRONG><a name="[d1]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdperiphdriver.o(i.I2C_SoftwareResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vI2cTimeOutHandler
</UL>

<P><STRONG><a name="[1b3]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stdperiphdriver.o(i.I2C_StretchClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vI2cReset
</UL>

<P><STRONG><a name="[84]"></a>I2C_TransferHandling</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, stdperiphdriver.o(i.I2C_TransferHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_TransferHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WritePage
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WaitEepromStandbyState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32ReadBuffer
</UL>

<P><STRONG><a name="[b5]"></a>I2C_vClearTimeoutCnt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2c.o(i.I2C_vClearTimeoutCnt))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>I2C_vDisableNvicInt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, i2c.o(i.I2C_vDisableNvicInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_vDisableNvicInt
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
</UL>

<P><STRONG><a name="[cd]"></a>I2C_vEnableNvicInt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, i2c.o(i.I2C_vEnableNvicInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_vEnableNvicInt
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
</UL>

<P><STRONG><a name="[cf]"></a>I2C_vI2cTimeOutHandler</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, i2c.o(i.I2C_vI2cTimeOutHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_vI2cTimeOutHandler &rArr; mg_vI2cReset &rArr; I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vI2cReset
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftwareResetCmd
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[d3]"></a>I2C_vInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, i2c.o(i.I2C_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_vInit &rArr; mg_vI2cReset &rArr; I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vI2cReset
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[d5]"></a>INTCOM_vCom1RxData</STRONG> (Thumb, 948 bytes, Stack size 96 bytes, intcom.o(i.INTCOM_vCom1RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = INTCOM_vCom1RxData &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_Rte_Write_P_u16FanCnt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Write_B_P_PRI_UART_FAIL
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Write_B_P_PRI_RX_PKG
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Write_B_P_PRI_NO_RX_PKG
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vHandleRxData
</UL>

<P><STRONG><a name="[19f]"></a>INTCOM_vCom1TxData</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, intcom.o(i.INTCOM_vCom1TxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = INTCOM_vCom1TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vHandleTxData
</UL>

<P><STRONG><a name="[da]"></a>INTCOM_vCom2RxData</STRONG> (Thumb, 842 bytes, Stack size 96 bytes, intcom.o(i.INTCOM_vCom2RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = INTCOM_vCom2RxData
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_Rte_Write_B_P_V1_OCP
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Write_B_P_SEC_UART_FAIL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Write_B_P_SEC_NO_RX_PKG
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vHandleRxData
</UL>

<P><STRONG><a name="[1a0]"></a>INTCOM_vCom2TxData</STRONG> (Thumb, 382 bytes, Stack size 52 bytes, intcom.o(i.INTCOM_vCom2TxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = INTCOM_vCom2TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vHandleTxData
</UL>

<P><STRONG><a name="[175]"></a>INTCOM_vInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, intcom.o(i.INTCOM_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[de]"></a>INTCOM_vTmOutMon</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, intcom.o(i.INTCOM_vTmOutMon))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = INTCOM_vTmOutMon
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Write_B_P_SEC_UART_FAIL
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Write_B_P_SEC_NO_RX_PKG
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Write_B_P_PRI_UART_FAIL
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Write_B_P_PRI_RX_PKG
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Write_B_P_PRI_NO_RX_PKG
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Write_B_P_COMMS_FAULT
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Read_B_R_VIN_OK_ACTIVE
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[17a]"></a>LEDCTRL_vInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ledctrl.o(i.LEDCTRL_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[e3]"></a>LEDCTRL_vLedControl</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, ledctrl.o(i.LEDCTRL_vLedControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LEDCTRL_vLedControl &rArr; LEDCTRL_SCFG_vSetInREDOn &rArr; PORT_vSetGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vSetGpioPinToggle
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vSetGpioPin
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_u8ReadFanBitFail
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_SCFG_vSetInREDOn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_SCFG_vSetInREDOff
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_RTE_Read_B_R_VIN_OK
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_RTE_Read_B_R_V1_UVP
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_RTE_Read_B_R_V1_OVP
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_RTE_Read_B_R_V1_OCP
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_RTE_Read_B_R_Aux_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[4a]"></a>MEM_u16Getlenght</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mem.o(i.MEM_u16Getlenght))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_u16Getlenght
</UL>

<P><STRONG><a name="[ed]"></a>MEM_vInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mem.o(i.MEM_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = MEM_vInit &rArr; mg_vReadMfrInfoData &rArr; MEM_SCFG_vReadMem &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadTrimData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrInfoData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadFwRevData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadAcOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[51]"></a>MEM_vRead2EEPORM</STRONG> (Thumb, 42 bytes, Stack size 304 bytes, mem.o(i.MEM_vRead2EEPORM))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = MEM_vRead2EEPORM &rArr; MEM_SCFG_vReadMem &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vWriteToMem
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vReadMem
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vInit
</UL>

<P><STRONG><a name="[f8]"></a>MEM_vReadFromMem</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mem.o(i.MEM_vReadFromMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MEM_vReadFromMem
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_SCFG_bRead
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vWrite2EEPORM
</UL>

<P><STRONG><a name="[f3]"></a>MEM_vSaveData</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, mem.o(i.MEM_vSaveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MEM_vSaveData &rArr; mg_vSaveMfrInfoData &rArr; MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveTrimData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveMfrInfoData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveFwRevData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveAcOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[65]"></a>MEM_vWrite2EEPORM</STRONG> (Thumb, 42 bytes, Stack size 304 bytes, mem.o(i.MEM_vWrite2EEPORM))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = MEM_vWrite2EEPORM &rArr; MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vReadFromMem
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vWriteMem
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
</UL>

<P><STRONG><a name="[f2]"></a>MEM_vWriteToMem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mem.o(i.MEM_vWriteToMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MEM_vWriteToMem
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_SCFG_bWrite
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vRead2EEPORM
</UL>

<P><STRONG><a name="[f9]"></a>MONCTRL_vAxuModeDetect</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, monctrl.o(i.MONCTRL_vAxuModeDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MONCTRL_vAxuModeDetect
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_P_u8AcLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[fb]"></a>MONCTRL_vCheckStatusReset</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, monctrl.o(i.MONCTRL_vCheckStatusReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MONCTRL_vCheckStatusReset
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vClearAllFault
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_UVP
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_OVP
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_OCP
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_LATCH
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VIN_UV
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VIN_OV
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_CLEAR_LATCH_FAULT
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_B_R_REMOTE_ON
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_B_R_NO_VIN
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[106]"></a>MONCTRL_vCheckVsbOvp</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, monctrl.o(i.MONCTRL_vCheckVsbOvp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MONCTRL_vCheckVsbOvp
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_OVW
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_OVP
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_LATCH
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_R_vVsbLinear
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_B_R_VSB_MONI_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[176]"></a>MONCTRL_vInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[10a]"></a>MONCTRL_vUpdateStatus</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, monctrl.o(i.MONCTRL_vUpdateStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MONCTRL_vUpdateStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_Rte_Write_B_P_STB_MODE
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_REMOTE_ON
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_ANY_NTC_FAULT
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_B_R_VIN_UV
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_B_R_VIN_OV
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_B_R_NO_VIN
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[110]"></a>MONCTRL_vVin</STRONG> (Thumb, 794 bytes, Stack size 16 bytes, monctrl.o(i.MONCTRL_vVin))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MONCTRL_vVin &rArr; PMBUS_vSaveBlackBoxVinData2Buff
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vSaveBlackBoxVinData2Buff
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_P_u8AcLineStatus
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VIN_UVW
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VIN_UV
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VIN_OV
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VIN_OK
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VIN_OCW
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_NO_VIN
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_B_R_VIN_UV
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_B_R_VIN_OV
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_B_R_NO_VIN
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_RTE_Read_B_R_VIN_OK_PRI
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[117]"></a>MONCTRL_vVsbOutput</STRONG> (Thumb, 722 bytes, Stack size 16 bytes, monctrl.o(i.MONCTRL_vVsbOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MONCTRL_vVsbOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_UVW
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_UVP
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_OVW
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_OCW
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_OCP
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Write_B_P_VSB_LATCH
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_R_vVsbLinear
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_B_R_VSB_ON_DIO
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_RTE_Read_B_R_VSB_MONI_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[ce]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stdperiphdriver.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vEnableNvicInt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vDisableNvicInt
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vInit
</UL>

<P><STRONG><a name="[125]"></a>PMBUS_vCheckBootMode</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, pmbus.o(i.PMBUS_vCheckBootMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PMBUS_vCheckBootMode &rArr; FLASH_u8WriteWordFlash &rArr; FLASH_ProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8WriteWordFlash
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8WriteHalfWordFlash
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u8ErasePageFlash
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u32ReadWordFlash
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_vSetBootMode
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[fe]"></a>PMBUS_vClearAllFault</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pmbus.o(i.PMBUS_vClearAllFault))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vVsbOut
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckStatusReset
</UL>

<P><STRONG><a name="[148]"></a>PMBUS_vClearPowerOffFault</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, pmbus.o(i.PMBUS_vClearPowerOffFault))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[c2]"></a>PMBUS_vCmdCheck</STRONG> (Thumb, 786 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_vCmdCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PMBUS_vCmdCheck &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_Rte_Read_R_u8PMBusCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>PMBUS_vCopyDebugData</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_vCopyDebugData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PMBUS_vCopyDebugData &rArr; PMBUS_SCFG_u16ReadFanSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u16GetMean1ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_u16ReadAdcAvgValue
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_u16ReadFanCtrlDuty
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_u16ReadFanSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[187]"></a>PMBUS_vCopyPecAndOringStatus</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pmbus.o(i.PMBUS_vCopyPecAndOringStatus))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[12b]"></a>PMBUS_vCopySensorData</STRONG> (Thumb, 1570 bytes, Stack size 16 bytes, pmbus.o(i.PMBUS_vCopySensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PMBUS_vCopySensorData &rArr; mg_u16TxLinearDatFormatDiv128_PSMI
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_s16ReadTempValue
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_u16TxLinearDatFormatDiv128_PSMI_TEMP
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_u16TxLinearDatFormatDiv128_PSMI
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_u16TxLinearDatFormatDiv128
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_u16ReadFanSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[12f]"></a>PMBUS_vCopyStatusData</STRONG> (Thumb, 1036 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_vCopyStatusData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PMBUS_vCopyStatusData &rArr; PMBUS_SCFG_u8ReadFanBitWarn
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_u8ReadFanBitWarn
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_u8ReadFanBitFail
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_Rte_Read_B_R_V1_OCP
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[178]"></a>PMBUS_vInit</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, pmbus.o(i.PMBUS_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[131]"></a>PMBUS_vSaveBlackBoxData2Buff</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_vSaveBlackBoxData2Buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PMBUS_vSaveBlackBoxData2Buff &rArr; CALI_vCalibrateV1 &rArr; mg_vCalibrateV1 &rArr; mg_s32GetCalibratedData
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCalibrateV1
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_u16TxLinearDatFormatDiv128
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vPushEventFaultBlackBox
</UL>

<P><STRONG><a name="[114]"></a>PMBUS_vSaveBlackBoxVinData2Buff</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_vSaveBlackBoxVinData2Buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMBUS_vSaveBlackBoxVinData2Buff
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_u16TxLinearDatFormatDiv128
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
</UL>

<P><STRONG><a name="[be]"></a>PMBUS_vSendData</STRONG> (Thumb, 3848 bytes, Stack size 32 bytes, pmbus.o(i.PMBUS_vSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PMBUS_vSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_Rte_Read_R_u8PMBusCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>PORT_u8ReadGpioPin</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.PORT_u8ReadGpioPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_u8ReadGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vReadGpioPort
</UL>

<P><STRONG><a name="[132]"></a>PORT_vInit</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, port.o(i.PORT_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PORT_vInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[138]"></a>PORT_vSetGpioMode</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, port.o(i.PORT_vSetGpioMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_vSetGpioMode
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_SCFG_vVsbSetOn
</UL>

<P><STRONG><a name="[af]"></a>PORT_vSetGpioPin</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, port.o(i.PORT_vSetGpioPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_vSetGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vLedControl
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vSetGpioPort
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_SCFG_vSetInREDOn
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_SCFG_vSetInREDOff
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_SCFG_vVsbSetOn
</UL>

<P><STRONG><a name="[e4]"></a>PORT_vSetGpioPinToggle</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.PORT_vSetGpioPinToggle))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vLedControl
</UL>

<P><STRONG><a name="[17c]"></a>PSUCTRL_vInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[139]"></a>PSUCTRL_vTrim</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, psuctrl.o(i.PSUCTRL_vTrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PSUCTRL_vTrim &rArr; PSUCTRL_SCFG_vVsbOvpDuty &rArr; PWM_vPwmDutyUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vPwmDutyUpdate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_SCFG_vVsbOvpDuty
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_Rte_Write_P_u16TrimV1GainOvp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_Rte_Write_P_u16TrimV1GainAct
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_Rte_Write_P_u16TrimV1Gain
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[13d]"></a>PSUCTRL_vV1Out</STRONG> (Thumb, 462 bytes, Stack size 8 bytes, psuctrl.o(i.PSUCTRL_vV1Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PSUCTRL_vV1Out
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vClearPowerOffFault
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vClearFault
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_Rte_Write_B_P_V1_MONI_EN
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_Rte_Write_B_P_TURN_ON_MAIN
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_Rte_Write_B_P_STA_V1_ON
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_Rte_Write_B_P_OUTPUT_OK
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_Rte_Read_B_R_TEMP_ANY_OTP
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_VIN_OK
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_V1_UVP
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_V1_OVP
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_V1_OCP
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_V1_FAULT_ACTIVE
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_STA_VSB_ON
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_REMOTE_ON
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_AUX_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[14d]"></a>PSUCTRL_vVsbOut</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, psuctrl.o(i.PSUCTRL_vVsbOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PSUCTRL_vVsbOut &rArr; PSUCTRL_SCFG_vVsbSetOn &rArr; PORT_vSetGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vClearAllFault
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_SCFG_vVsbSetOn
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_Rte_Write_B_P_VSB_MONI_EN
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_Rte_Write_B_P_STA_VSB_ON
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_VSB_OCP
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_VIN_OK
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_V1_FAULT_ACTIVE
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_RTE_Read_B_R_AUX_MODE
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[151]"></a>PWM_vInit</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, pwm.o(i.PWM_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PWM_vInit &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[136]"></a>PWM_vPwmDutyUpdate</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pwm.o(i.PWM_vPwmDutyUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PWM_vPwmDutyUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vTrim
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_SCFG_vVsbOvpDuty
</UL>

<P><STRONG><a name="[166]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stdperiphdriver.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_vInit
</UL>

<P><STRONG><a name="[36]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stdperiphdriver.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vInit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>

<P><STRONG><a name="[27]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stdperiphdriver.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_vInit
</UL>
<BR>[Address Reference Count : 3]<UL><LI> pwm.o(.constdata)
<LI> i2c.o(.constdata)
<LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stdperiphdriver.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>
<BR>[Address Reference Count : 3]<UL><LI> pwm.o(.constdata)
<LI> timer.o(.constdata)
<LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stdperiphdriver.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_vRemapVectorTable
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[167]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stdperiphdriver.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_vInit
</UL>

<P><STRONG><a name="[161]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 554 bytes, Stack size 32 bytes, stdperiphdriver.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[169]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stdperiphdriver.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_vInit
</UL>

<P><STRONG><a name="[168]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stdperiphdriver.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_vInit
</UL>

<P><STRONG><a name="[163]"></a>RTC_EnterInitMode</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stdperiphdriver.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[164]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stdperiphdriver.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[162]"></a>RTC_Init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stdperiphdriver.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_vInit
</UL>

<P><STRONG><a name="[16a]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stdperiphdriver.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_vInit
</UL>

<P><STRONG><a name="[165]"></a>RTC_vInit</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rtc.o(i.RTC_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_vInit &rArr; RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[16f]"></a>RTE_vInit</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, rte.o(i.RTE_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[16b]"></a>SCHM_vInit</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, schm.o(i.SCHM_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = SCHM_vInit &rArr; BLABOX_vInit &rArr; MEM_vRead2EEPORM &rArr; MEM_SCFG_vReadMem &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_vInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_vInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vInit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vInit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vCheckBootLoaderExistFlg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_vInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_vInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_vInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vSetGpioPin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_vInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_vInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_vInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_SCB_vInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vInit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>SCHM_vSchmIdleLoop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, schm.o(i.SCHM_vSchmIdleLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = SCHM_vSchmIdleLoop &rArr; SCHM_vSchmRoutine &rArr; BLABOX_vProcessBlackbox &rArr; MEM_vWrite2EEPORM &rArr; MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_u8GetUpdateFlg
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>SCHM_vSchmRoutine</STRONG> (Thumb, 614 bytes, Stack size 8 bytes, schm.o(i.SCHM_vSchmRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = SCHM_vSchmRoutine &rArr; BLABOX_vProcessBlackbox &rArr; MEM_vWrite2EEPORM &rArr; MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_vLookUpNtcTemperature
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vVsbOut
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vTrim
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopyStatusData
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopySensorData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopyPecAndOringStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopyDebugData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCheckBootMode
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVsbOutput
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vUpdateStatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckVsbOvp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckStatusReset
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vAxuModeDetect
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vSaveData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vLedControl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vTmOutMon
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vI2cTimeOutHandler
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vSetGpioPort
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vReadGpioPort
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_vFanSpeedCalc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_vFanCtrl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCalibrateIShare
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliFast
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCalcCaliPara
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_TimePSONBlackBox
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_CheckPSONBlackBox
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_CheckACBlackBox
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vCountRealTimeClockDataSystemBlackbox
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vClearWarning
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_SCB_vLoop1msTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_SCB_vLoop10msTask
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vTxData
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vTmOutMon
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vHandleTxData
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vHandleRxData
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vClearUpdateFlg
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vSaveHoursUsed
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_vNtcVoltAverage
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_vNtcTempMonitor
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmIdleLoop
</UL>

<P><STRONG><a name="[a4]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stdperiphdriver.o(i.SYSCFG_MemoryRemapConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_vRemapVectorTable
</UL>

<P><STRONG><a name="[46]"></a>S_DAM_bRead</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, s_dam.o(i.S_DAM_bRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_mgU32HeaderIndex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_SCFG_u32Crc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_SCFG_bRead
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Read
</UL>

<P><STRONG><a name="[48]"></a>S_DAM_bWrite</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, s_dam.o(i.S_DAM_bWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = S_DAM_bWrite &rArr; S_DAM_SCFG_bWrite &rArr; MEM_vWriteToMem
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_mgU32HeaderIndex
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_SCFG_u32Crc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_SCFG_bWrite
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_SCFG_bRead
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Write
</UL>

<P><STRONG><a name="[4c]"></a>S_DAM_u32GetLastRecordId</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, s_dam.o(i.S_DAM_u32GetLastRecordId))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = S_DAM_u32GetLastRecordId &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_mgU32HeaderIndex
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_SCFG_bRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_u32GetLastRecordId
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, clock.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vIntOscSel
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_vInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>TEMPCTRL_s16ReadTempValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tempctrl.o(i.TEMPCTRL_s16ReadTempValue))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopySensorData
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_AdjSpeed
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_SCFG_s16ReadSecRecdiode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_SCFG_s16ReadPriPfc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_SCFG_s16ReadPriLlc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_SCFG_s16ReadOutTemp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_SCFG_s16ReadAmbTemp
</UL>

<P><STRONG><a name="[129]"></a>TEMPCTRL_u16ReadAdcAvgValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tempctrl.o(i.TEMPCTRL_u16ReadAdcAvgValue))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopyDebugData
</UL>

<P><STRONG><a name="[177]"></a>TEMPCTRL_vInit</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, tempctrl.o(i.TEMPCTRL_vInit))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[18a]"></a>TEMPCTRL_vLookUpNtcTemperature</STRONG> (Thumb, 582 bytes, Stack size 16 bytes, tempctrl.o(i.TEMPCTRL_vLookUpNtcTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TEMPCTRL_vLookUpNtcTemperature
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[18b]"></a>TEMPCTRL_vNtcTempMonitor</STRONG> (Thumb, 636 bytes, Stack size 8 bytes, tempctrl.o(i.TEMPCTRL_vNtcTempMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEMPCTRL_vNtcTempMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_u8ReadFanBitFail
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[186]"></a>TEMPCTRL_vNtcVoltAverage</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, tempctrl.o(i.TEMPCTRL_vNtcVoltAverage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEMPCTRL_vNtcVoltAverage
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[17b]"></a>TIMECTRL_vInit</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, timectrl.o(i.TIMECTRL_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = TIMECTRL_vInit &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32ReadBuffer
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_RTE_Write_P_vWrHoursUsed
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_RTE_Write_P_u32PosTotal
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECATL_SCFG_u8GetCrc8
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[18c]"></a>TIMECTRL_vSaveHoursUsed</STRONG> (Thumb, 478 bytes, Stack size 32 bytes, timectrl.o(i.TIMECTRL_vSaveHoursUsed))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = TIMECTRL_vSaveHoursUsed &rArr; TIMECATL_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_RTE_Write_P_vWrHoursUsed
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_RTE_Write_P_vWrBitHoursUpd
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_RTE_Write_P_vDataCopy
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_RTE_Write_P_u32PosTotal
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_RTE_Write_B_P_PSO_TOTAL_UPDTING
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_RTE_Write_B_P_PSO_LAST_UPDTING
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECATL_SCFG_vWriteMem
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECATL_SCFG_u8GetCrc8
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[17f]"></a>TIMER_u8GetUpdateFlg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(i.TIMER_u8GetUpdateFlg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_u8GetUpdateFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmIdleLoop
</UL>

<P><STRONG><a name="[181]"></a>TIMER_vClearUpdateFlg</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer.o(i.TIMER_vClearUpdateFlg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_vClearUpdateFlg
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[16d]"></a>TIMER_vInit</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, timer.o(i.TIMER_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_vInit
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GenerateEvent
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[19c]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vClearUpdateFlg
</UL>

<P><STRONG><a name="[15b]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vInit
</UL>

<P><STRONG><a name="[15c]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
</UL>

<P><STRONG><a name="[19d]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_GenerateEvent))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vInit
</UL>

<P><STRONG><a name="[19b]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_u8GetUpdateFlg
</UL>

<P><STRONG><a name="[19e]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vInit
</UL>

<P><STRONG><a name="[153]"></a>TIM_OC1Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stdperiphdriver.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
</UL>

<P><STRONG><a name="[154]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
</UL>

<P><STRONG><a name="[155]"></a>TIM_OC2Init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stdperiphdriver.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
</UL>

<P><STRONG><a name="[156]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
</UL>

<P><STRONG><a name="[157]"></a>TIM_OC3Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stdperiphdriver.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
</UL>

<P><STRONG><a name="[158]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
</UL>

<P><STRONG><a name="[159]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stdperiphdriver.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
</UL>

<P><STRONG><a name="[15a]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
</UL>

<P><STRONG><a name="[15d]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vPwmDutyUpdate
</UL>

<P><STRONG><a name="[15e]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vPwmDutyUpdate
</UL>

<P><STRONG><a name="[15f]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vPwmDutyUpdate
</UL>

<P><STRONG><a name="[160]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vPwmDutyUpdate
</UL>

<P><STRONG><a name="[152]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stdperiphdriver.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vInit
</UL>

<P><STRONG><a name="[185]"></a>UARTPRT_vHandleRxData</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, uartprt.o(i.UARTPRT_vHandleRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = UARTPRT_vHandleRxData &rArr; INTCOM_vCom1RxData &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom2RxData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom1RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[184]"></a>UARTPRT_vHandleTxData</STRONG> (Thumb, 578 bytes, Stack size 24 bytes, uartprt.o(i.UARTPRT_vHandleTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UARTPRT_vHandleTxData &rArr; INTCOM_vCom2TxData
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom2TxData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom1TxData
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[171]"></a>UARTPRT_vInit</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, uartprt.o(i.UARTPRT_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTPRT_vInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_u16UartReadBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[120]"></a>UARTPRT_vSetBootMode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, uartprt.o(i.UARTPRT_vSetBootMode))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_vSetBootMode
</UL>

<P><STRONG><a name="[183]"></a>UARTPRT_vTmOutMon</STRONG> (Thumb, 450 bytes, Stack size 0 bytes, uartprt.o(i.UARTPRT_vTmOutMon))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[182]"></a>UARTPRT_vTxData</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, uartprt.o(i.UARTPRT_vTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTPRT_vTxData &rArr; CRC_u16GetCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vUartWriteTxReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_u8UartReadTxEmptyFlg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_u16GetCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
</UL>

<P><STRONG><a name="[28]"></a>UARTPRT_vUsartIrqHandler</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, uartprt.o(i.UARTPRT_vUsartIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTPRT_vUsartIrqHandler &rArr; CRC_u16GetCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_u8UartReadRxReg
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_u16GetCrc16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>UART_u16UartReadBaudrate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.UART_u16UartReadBaudrate))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vInit
</UL>

<P><STRONG><a name="[1a4]"></a>UART_u8UartReadRxReg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.UART_u8UartReadRxReg))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vUsartIrqHandler
</UL>

<P><STRONG><a name="[1a2]"></a>UART_u8UartReadTxEmptyFlg</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UART_u8UartReadTxEmptyFlg))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vTxData
</UL>

<P><STRONG><a name="[16e]"></a>UART_vInit</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, uart.o(i.UART_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = UART_vInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
</UL>

<P><STRONG><a name="[1a3]"></a>UART_vUartWriteTxReg</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(i.UART_vUartWriteTxReg))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vTxData
</UL>

<P><STRONG><a name="[20]"></a>USART1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stdperiphdriver.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a6]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stdperiphdriver.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vInit
</UL>

<P><STRONG><a name="[1a8]"></a>USART_GetITStatus</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stdperiphdriver.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>USART_ITConfig</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stdperiphdriver.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vInit
</UL>

<P><STRONG><a name="[1a5]"></a>USART_Init</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, stdperiphdriver.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_vInit
</UL>

<P><STRONG><a name="[6a]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, buffer.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliHandler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmRoutine
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_SCFG_vReadValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPMBus_HandleData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCmdCheck
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadCalibPara
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCopyCaliData
</UL>

<P><STRONG><a name="[1d2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[23]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = main &rArr; SCHM_vSchmIdleLoop &rArr; SCHM_vSchmRoutine &rArr; BLABOX_vProcessBlackbox &rArr; MEM_vWrite2EEPORM &rArr; MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vSchmIdleLoop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCHM_vInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_vRemapVectorTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[cc]"></a>vPMBus_HandleData</STRONG> (Thumb, 2092 bytes, Stack size 40 bytes, pmbus.o(i.vPMBus_HandleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = vPMBus_HandleData &rArr; BLABOX_vMFR_SystemBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vSetRealTimeClockDataSystemBlackbox
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vSetEnableBlackbox
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_SystemBlackBox
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_ClearBlackBox
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vClearFaultBit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_vSysSetFanCtrlDuty
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_SCFG_vSetFanBlockTest
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_Rte_Write_P_u8TempTestIndex
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_Rte_Read_R_u8PMBusCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[68]"></a>BUFFER_SCFG_vReadValue</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, buffer.o(i.BUFFER_SCFG_vReadValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BUFFER_SCFG_vReadValue &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vReadRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_SCB_vLoop1msTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_SCB_vLoop10msTask
</UL>

<P><STRONG><a name="[192]"></a>mg_vIntOscSel</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, clock.o(i.mg_vIntOscSel))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[85]"></a>mg_u32TimeoutUserCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eeprom.o(i.mg_u32TimeoutUserCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WritePage
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WriteBuffer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WaitEepromStandbyState
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32ReadBuffer
</UL>

<P><STRONG><a name="[d2]"></a>mg_vI2cReset</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, i2c.o(i.mg_vI2cReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mg_vI2cReset &rArr; I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StretchClockCmd
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_vI2cTimeOutHandler
</UL>

<P><STRONG><a name="[1ad]"></a>CALI_Rte_Read_B_R_VIN_OK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cali.o(i.CALI_Rte_Read_B_R_VIN_OK))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateVin
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateIin
</UL>

<P><STRONG><a name="[6f]"></a>CALI_Rte_Read_R_u1610mAIoutAvg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cali.o(i.CALI_Rte_Read_R_u1610mAIoutAvg))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCalibrateIShare
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCalcCaliPara
</UL>

<P><STRONG><a name="[6c]"></a>CALI_SCFG_u8GetCrc8</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cali.o(i.CALI_SCFG_u8GetCrc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CALI_SCFG_u8GetCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveCaliData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadEepData
</UL>

<P><STRONG><a name="[71]"></a>mg_s32GetCalibratedData</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, cali.o(i.mg_s32GetCalibratedData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mg_s32GetCalibratedData
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliFast
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateVsb
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateVin
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateV1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalibrateIin
</UL>

<P><STRONG><a name="[81]"></a>mg_vCalcV1CurrentGain</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cali.o(i.mg_vCalcV1CurrentGain))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mg_vCalcV1CurrentGain &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCopyCaliData
</UL>

<P><STRONG><a name="[1be]"></a>mg_vCaliDefaultIinAc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cali.o(i.mg_vCaliDefaultIinAc))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSetDefaultCaliData
</UL>

<P><STRONG><a name="[1c1]"></a>mg_vCaliDefaultIoutV1</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cali.o(i.mg_vCaliDefaultIoutV1))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSetDefaultCaliData
</UL>

<P><STRONG><a name="[1c3]"></a>mg_vCaliDefaultIoutVsb</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cali.o(i.mg_vCaliDefaultIoutVsb))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSetDefaultCaliData
</UL>

<P><STRONG><a name="[1bf]"></a>mg_vCaliDefaultPinAc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cali.o(i.mg_vCaliDefaultPinAc))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSetDefaultCaliData
</UL>

<P><STRONG><a name="[1c4]"></a>mg_vCaliDefaultV1IShare</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cali.o(i.mg_vCaliDefaultV1IShare))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSetDefaultCaliData
</UL>

<P><STRONG><a name="[1bd]"></a>mg_vCaliDefaultVinAc</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cali.o(i.mg_vCaliDefaultVinAc))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSetDefaultCaliData
</UL>

<P><STRONG><a name="[1c0]"></a>mg_vCaliDefaultVoutV1</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cali.o(i.mg_vCaliDefaultVoutV1))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSetDefaultCaliData
</UL>

<P><STRONG><a name="[1c2]"></a>mg_vCaliDefaultVoutVsb</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cali.o(i.mg_vCaliDefaultVoutVsb))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSetDefaultCaliData
</UL>

<P><STRONG><a name="[7b]"></a>mg_vCalibrateIShave</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cali.o(i.mg_vCalibrateIShave))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliHandler
</UL>

<P><STRONG><a name="[76]"></a>mg_vCalibrateIin</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, cali.o(i.mg_vCalibrateIin))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mg_vCalibrateIin &rArr; mg_s32GetCalibratedData
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_s32GetCalibratedData
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_Rte_Read_B_R_VIN_OK
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliHandler
</UL>

<P><STRONG><a name="[77]"></a>mg_vCalibratePin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cali.o(i.mg_vCalibratePin))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliHandler
</UL>

<P><STRONG><a name="[78]"></a>mg_vCalibrateV1</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cali.o(i.mg_vCalibrateV1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mg_vCalibrateV1 &rArr; mg_s32GetCalibratedData
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_s32GetCalibratedData
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCalibrateV1
</UL>

<P><STRONG><a name="[7a]"></a>mg_vCalibrateV1Sense</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cali.o(i.mg_vCalibrateV1Sense))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliHandler
</UL>

<P><STRONG><a name="[75]"></a>mg_vCalibrateVin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cali.o(i.mg_vCalibrateVin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mg_vCalibrateVin &rArr; mg_s32GetCalibratedData
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_s32GetCalibratedData
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_Rte_Read_B_R_VIN_OK
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliHandler
</UL>

<P><STRONG><a name="[79]"></a>mg_vCalibrateVsb</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, cali.o(i.mg_vCalibrateVsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mg_vCalibrateVsb &rArr; mg_s32GetCalibratedData
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u16GetMean1ms
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_s32GetCalibratedData
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliHandler
</UL>

<P><STRONG><a name="[73]"></a>mg_vCopyCaliData</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, cali.o(i.mg_vCopyCaliData))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mg_vCopyCaliData &rArr; mg_vCalcV1CurrentGain &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSetDefaultCaliData
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadCalibPara
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCopyDataToBuf
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCalcV1CurrentGain
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliHandler
</UL>

<P><STRONG><a name="[1b2]"></a>mg_vCopyDataToBuf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cali.o(i.mg_vCopyDataToBuf))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadCalibPara
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCopyCaliData
</UL>

<P><STRONG><a name="[1b1]"></a>mg_vReadCalibPara</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, cali.o(i.mg_vReadCalibPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mg_vReadCalibPara &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCopyDataToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCopyCaliData
</UL>

<P><STRONG><a name="[80]"></a>mg_vReadEepData</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, cali.o(i.mg_vReadEepData))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mg_vReadEepData &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32ReadBuffer
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_SCFG_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vInit
</UL>

<P><STRONG><a name="[74]"></a>mg_vSaveCaliData</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, cali.o(i.mg_vSaveCaliData))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mg_vSaveCaliData &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WriteBuffer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WaitEepromStandbyState
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_SCFG_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vCaliHandler
</UL>

<P><STRONG><a name="[7f]"></a>mg_vSetDefaultCaliData</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, cali.o(i.mg_vSetDefaultCaliData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mg_vSetDefaultCaliData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCaliDefaultVoutVsb
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCaliDefaultVoutV1
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCaliDefaultVinAc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCaliDefaultV1IShare
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCaliDefaultPinAc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCaliDefaultIoutVsb
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCaliDefaultIoutV1
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCaliDefaultIinAc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALI_vInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vCopyCaliData
</UL>

<P><STRONG><a name="[c9]"></a>I2CPRT_RTE_Read_B_R_PEC_ERR_FLG</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_RTE_Read_B_R_PEC_ERR_FLG))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
</UL>

<P><STRONG><a name="[bf]"></a>I2CPRT_RTE_Write_B_P_CMD_WAIT_FLG</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_RTE_Write_B_P_CMD_WAIT_FLG))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>I2CPRT_RTE_Write_B_P_PEC_CHANGE_FLG</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_RTE_Write_B_P_PEC_CHANGE_FLG))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
</UL>

<P><STRONG><a name="[ca]"></a>I2CPRT_RTE_Write_B_P_PEC_ERR_FLG</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_RTE_Write_B_P_PEC_ERR_FLG))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
</UL>

<P><STRONG><a name="[c3]"></a>I2CPRT_Rte_Read_R_u8I2cPEC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_Rte_Read_R_u8I2cPEC))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>I2CPRT_Rte_Read_R_u8I2cRxCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_Rte_Read_R_u8I2cRxCnt))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>I2CPRT_Rte_Write_P_u8I2cExpRxCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_Rte_Write_P_u8I2cExpRxCnt))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>I2CPRT_Rte_Write_P_u8I2cExpTxCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_Rte_Write_P_u8I2cExpTxCnt))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[bb]"></a>I2CPRT_Rte_Write_P_u8I2cPEC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_Rte_Write_P_u8I2cPEC))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>I2CPRT_Rte_Write_P_u8I2cRxCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_Rte_Write_P_u8I2cRxCnt))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>I2CPRT_Rte_Write_P_u8I2cTxLen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_Rte_Write_P_u8I2cTxLen))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>I2CPRT_Rte_Write_P_u8PecErrCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_Rte_Write_P_u8PecErrCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vInit
</UL>

<P><STRONG><a name="[c4]"></a>I2CPRT_Rte_Write_P_u8TxBuf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2cprt.o(i.I2CPRT_Rte_Write_P_u8TxBuf))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vInit
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>I2CPRT_SCFG_eGetRxSTOPFlg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2cprt.o(i.I2CPRT_SCFG_eGetRxSTOPFlg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CPRT_SCFG_eGetRxSTOPFlg &rArr; I2C_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CPRT_vProcessReceiveData
</UL>

<P><STRONG><a name="[bd]"></a>I2CPRT_SCFG_u8GetCrc8</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, i2cprt.o(i.I2CPRT_SCFG_u8GetCrc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CPRT_SCFG_u8GetCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>MEM_SCFG_u8GetCrc8</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mem.o(i.MEM_SCFG_u8GetCrc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MEM_SCFG_u8GetCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveTrimData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveMfrInfoData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveFwRevData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveAcOffset
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadTrimData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrInfoData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadFwRevData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadAcOffset
</UL>

<P><STRONG><a name="[eb]"></a>MEM_SCFG_vReadMem</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mem.o(i.MEM_SCFG_vReadMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MEM_SCFG_vReadMem &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vRead2EEPORM
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadTrimData
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrInfoData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadFwRevData
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadAcOffset
</UL>

<P><STRONG><a name="[ec]"></a>MEM_SCFG_vWriteMem</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mem.o(i.MEM_SCFG_vWriteMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vWrite2EEPORM
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveTrimData
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveMfrInfoData
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveFwRevData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveAcOffset
</UL>

<P><STRONG><a name="[1b9]"></a>MONCTRL_Rte_Write_B_P_AC_OFFSET_SAVEED</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mem.o(i.MONCTRL_Rte_Write_B_P_AC_OFFSET_SAVEED))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vSaveAcOffset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadAcOffset
</UL>

<P><STRONG><a name="[1ba]"></a>MONCTRL_Rte_Write_P_u16TrimV1Gain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(i.MONCTRL_Rte_Write_P_u16TrimV1Gain))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadTrimData
</UL>

<P><STRONG><a name="[1bb]"></a>MONCTRL_Rte_Write_P_u16TrimV1GainAct</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(i.MONCTRL_Rte_Write_P_u16TrimV1GainAct))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadTrimData
</UL>

<P><STRONG><a name="[1bc]"></a>MONCTRL_Rte_Write_P_u16TrimVsbGain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(i.MONCTRL_Rte_Write_P_u16TrimVsbGain))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadTrimData
</UL>

<P><STRONG><a name="[f0]"></a>mg_vReadAcOffset</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, mem.o(i.mg_vReadAcOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mg_vReadAcOffset &rArr; MEM_SCFG_vReadMem &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_Rte_Write_B_P_AC_OFFSET_SAVEED
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vReadMem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vInit
</UL>

<P><STRONG><a name="[ee]"></a>mg_vReadFwRevData</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, mem.o(i.mg_vReadFwRevData))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mg_vReadFwRevData &rArr; MEM_SCFG_vReadMem &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_u32BootloaderFwVer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vReadMem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vInit
</UL>

<P><STRONG><a name="[f1]"></a>mg_vReadMfrInfoData</STRONG> (Thumb, 96 bytes, Stack size 120 bytes, mem.o(i.mg_vReadMfrInfoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = mg_vReadMfrInfoData &rArr; MEM_SCFG_vReadMem &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vReadMem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vInit
</UL>

<P><STRONG><a name="[ef]"></a>mg_vReadTrimData</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, mem.o(i.mg_vReadTrimData))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = mg_vReadTrimData &rArr; MEM_SCFG_vReadMem &rArr; EEPROM_u32ReadBuffer &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_Rte_Write_P_u16TrimVsbGain
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_Rte_Write_P_u16TrimV1GainAct
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_Rte_Write_P_u16TrimV1Gain
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vReadMem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vInit
</UL>

<P><STRONG><a name="[f6]"></a>mg_vSaveAcOffset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, mem.o(i.mg_vSaveAcOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = mg_vSaveAcOffset &rArr; MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_Rte_Write_B_P_AC_OFFSET_SAVEED
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vWriteMem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vSaveData
</UL>

<P><STRONG><a name="[f5]"></a>mg_vSaveFwRevData</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, mem.o(i.mg_vSaveFwRevData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mg_vSaveFwRevData &rArr; MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vWriteMem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vSaveData
</UL>

<P><STRONG><a name="[f7]"></a>mg_vSaveMfrInfoData</STRONG> (Thumb, 116 bytes, Stack size 120 bytes, mem.o(i.mg_vSaveMfrInfoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = mg_vSaveMfrInfoData &rArr; MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vWriteMem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vSaveData
</UL>

<P><STRONG><a name="[f4]"></a>mg_vSaveTrimData</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, mem.o(i.mg_vSaveTrimData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = mg_vSaveTrimData &rArr; MEM_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_vWriteMem
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SCFG_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vSaveData
</UL>

<P><STRONG><a name="[a8]"></a>HWIO_RTE_Write_B_P_54V_FAULT_ACTIVE</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hwio.o(i.HWIO_RTE_Write_B_P_54V_FAULT_ACTIVE))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vReadGpioPort
</UL>

<P><STRONG><a name="[aa]"></a>HWIO_RTE_Write_B_P_I2C_ADDRESS0</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hwio.o(i.HWIO_RTE_Write_B_P_I2C_ADDRESS0))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vReadGpioPort
</UL>

<P><STRONG><a name="[ab]"></a>HWIO_RTE_Write_B_P_I2C_ADDRESS1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hwio.o(i.HWIO_RTE_Write_B_P_I2C_ADDRESS1))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vReadGpioPort
</UL>

<P><STRONG><a name="[a7]"></a>HWIO_RTE_Write_B_P_PSON_ACTIVE</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hwio.o(i.HWIO_RTE_Write_B_P_PSON_ACTIVE))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vReadGpioPort
</UL>

<P><STRONG><a name="[b0]"></a>HWIO_RTE_Write_B_P_VINOK_ENA</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hwio.o(i.HWIO_RTE_Write_B_P_VINOK_ENA))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vSetGpioPort
</UL>

<P><STRONG><a name="[a9]"></a>HWIO_RTE_Write_B_P_VIN_OK_ACTIVE</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hwio.o(i.HWIO_RTE_Write_B_P_VIN_OK_ACTIVE))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vReadGpioPort
</UL>

<P><STRONG><a name="[ae]"></a>HWIO_Rte_Read_B_R_COM_VIN_OK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hwio.o(i.HWIO_Rte_Read_B_R_COM_VIN_OK))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vSetGpioPort
</UL>

<P><STRONG><a name="[b1]"></a>HWIO_Rte_Read_B_R_OUTPUT_OK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hwio.o(i.HWIO_Rte_Read_B_R_OUTPUT_OK))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vSetGpioPort
</UL>

<P><STRONG><a name="[b2]"></a>HWIO_Rte_Read_B_R_SMBALLERT_ST</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hwio.o(i.HWIO_Rte_Read_B_R_SMBALLERT_ST))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vSetGpioPort
</UL>

<P><STRONG><a name="[b3]"></a>HWIO_Rte_Read_B_R_V1_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hwio.o(i.HWIO_Rte_Read_B_R_V1_ON))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vSetGpioPort
</UL>

<P><STRONG><a name="[b4]"></a>HWIO_Rte_Read_B_R_VIN_LINE_LOW</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hwio.o(i.HWIO_Rte_Read_B_R_VIN_LINE_LOW))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vSetGpioPort
</UL>

<P><STRONG><a name="[ad]"></a>HWIO_Rte_Read_B_R_VIN_OK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hwio.o(i.HWIO_Rte_Read_B_R_VIN_OK))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWIO_vSetGpioPort
</UL>

<P><STRONG><a name="[18d]"></a>S_DAM_SCFG_bRead</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, s_dam.o(i.S_DAM_SCFG_bRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vReadFromMem
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_u32GetLastRecordId
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_bWrite
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_bRead
</UL>

<P><STRONG><a name="[18e]"></a>S_DAM_SCFG_bWrite</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, s_dam.o(i.S_DAM_SCFG_bWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = S_DAM_SCFG_bWrite &rArr; MEM_vWriteToMem
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_vWriteToMem
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_bWrite
</UL>

<P><STRONG><a name="[18f]"></a>S_DAM_SCFG_u32Crc</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, s_dam.o(i.S_DAM_SCFG_u32Crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = S_DAM_SCFG_u32Crc &rArr; CRC_u16GetCrc16
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_u16GetCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_bWrite
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_bRead
</UL>

<P><STRONG><a name="[191]"></a>S_DAM_mgU32HeaderIndex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, s_dam.o(i.S_DAM_mgU32HeaderIndex))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_u32GetLastRecordId
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_bWrite
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_bRead
</UL>

<P><STRONG><a name="[130]"></a>PMBUS_Rte_Read_B_R_V1_OCP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pmbus.o(i.PMBUS_Rte_Read_B_R_V1_OCP))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopyStatusData
</UL>

<P><STRONG><a name="[126]"></a>PMBUS_Rte_Read_R_u8PMBusCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pmbus.o(i.PMBUS_Rte_Read_R_u8PMBusCmd))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPMBus_HandleData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vSendData
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCmdCheck
</UL>

<P><STRONG><a name="[1c5]"></a>PMBUS_Rte_Write_P_u8TempTestIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pmbus.o(i.PMBUS_Rte_Write_P_u8TempTestIndex))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPMBus_HandleData
</UL>

<P><STRONG><a name="[11b]"></a>PMBUS_SCFG_u16ReadFanSpeed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_SCFG_u16ReadFanSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMBUS_SCFG_u16ReadFanSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_u16ReadFanSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopySensorData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopyDebugData
</UL>

<P><STRONG><a name="[11d]"></a>PMBUS_SCFG_u8ReadFanBitFail</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_SCFG_u8ReadFanBitFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMBUS_SCFG_u8ReadFanBitFail
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_u8ReadFanBitFail
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopyStatusData
</UL>

<P><STRONG><a name="[11e]"></a>PMBUS_SCFG_u8ReadFanBitWarn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_SCFG_u8ReadFanBitWarn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMBUS_SCFG_u8ReadFanBitWarn
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_u8ReadFanBitWarn
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopyStatusData
</UL>

<P><STRONG><a name="[11f]"></a>PMBUS_SCFG_vSetBootMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_SCFG_vSetBootMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMBUS_SCFG_vSetBootMode
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPRT_vSetBootMode
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCheckBootMode
</UL>

<P><STRONG><a name="[121]"></a>PMBUS_SCFG_vSetFanBlockTest</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pmbus.o(i.PMBUS_SCFG_vSetFanBlockTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PMBUS_SCFG_vSetFanBlockTest
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_vSetFanBlockTest
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPMBus_HandleData
</UL>

<P><STRONG><a name="[123]"></a>PMBUS_SCFG_vSysSetFanCtrlDuty</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, pmbus.o(i.PMBUS_SCFG_vSysSetFanCtrlDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PMBUS_SCFG_vSysSetFanCtrlDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_vSysSetFanCtrlDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPMBus_HandleData
</UL>

<P><STRONG><a name="[12e]"></a>mg_u16TxLinearDatFormatDiv128</STRONG> (Thumb, 408 bytes, Stack size 0 bytes, pmbus.o(i.mg_u16TxLinearDatFormatDiv128))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopySensorData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vSaveBlackBoxVinData2Buff
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vSaveBlackBoxData2Buff
</UL>

<P><STRONG><a name="[12c]"></a>mg_u16TxLinearDatFormatDiv128_PSMI</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, pmbus.o(i.mg_u16TxLinearDatFormatDiv128_PSMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mg_u16TxLinearDatFormatDiv128_PSMI
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16Ones
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopySensorData
</UL>

<P><STRONG><a name="[12d]"></a>mg_u16TxLinearDatFormatDiv128_PSMI_TEMP</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pmbus.o(i.mg_u16TxLinearDatFormatDiv128_PSMI_TEMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mg_u16TxLinearDatFormatDiv128_PSMI_TEMP
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vCopySensorData
</UL>

<P><STRONG><a name="[1ae]"></a>mg_vClearFaultBit</STRONG> (Thumb, 816 bytes, Stack size 16 bytes, pmbus.o(i.mg_vClearFaultBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mg_vClearFaultBit &rArr; FANCTRL_u8WriteFanBitWarn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_u8WriteFanBitWarn
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_u8WriteFanBitFail
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPMBus_HandleData
</UL>

<P><STRONG><a name="[1ac]"></a>u16Ones</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pmbus.o(i.u16Ones))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_u16TxLinearDatFormatDiv128_PSMI
</UL>

<P><STRONG><a name="[1ab]"></a>FANCTRL_RTE_Read_B_R_SYS_UNLOCK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fanctrl.o(i.FANCTRL_RTE_Read_B_R_SYS_UNLOCK))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_AdjSpeed
</UL>

<P><STRONG><a name="[8e]"></a>FANCTRL_Rte_Read_R_s32TempDiff</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, fanctrl.o(i.FANCTRL_Rte_Read_R_s32TempDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FANCTRL_Rte_Read_R_s32TempDiff &rArr; FANCTRL_SCFG_s16ReadSecRecdiode
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_SCFG_s16ReadSecRecdiode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_SCFG_s16ReadPriPfc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_SCFG_s16ReadPriLlc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_SCFG_s16ReadOutTemp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_SCFG_s16ReadAmbTemp
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_AdjSpeed
</UL>

<P><STRONG><a name="[8f]"></a>FANCTRL_SCFG_s16ReadAmbTemp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fanctrl.o(i.FANCTRL_SCFG_s16ReadAmbTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FANCTRL_SCFG_s16ReadAmbTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_s16ReadTempValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_Rte_Read_R_s32TempDiff
</UL>

<P><STRONG><a name="[93]"></a>FANCTRL_SCFG_s16ReadOutTemp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fanctrl.o(i.FANCTRL_SCFG_s16ReadOutTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FANCTRL_SCFG_s16ReadOutTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_s16ReadTempValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_Rte_Read_R_s32TempDiff
</UL>

<P><STRONG><a name="[91]"></a>FANCTRL_SCFG_s16ReadPriLlc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fanctrl.o(i.FANCTRL_SCFG_s16ReadPriLlc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FANCTRL_SCFG_s16ReadPriLlc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_s16ReadTempValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_Rte_Read_R_s32TempDiff
</UL>

<P><STRONG><a name="[90]"></a>FANCTRL_SCFG_s16ReadPriPfc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fanctrl.o(i.FANCTRL_SCFG_s16ReadPriPfc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FANCTRL_SCFG_s16ReadPriPfc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_s16ReadTempValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_Rte_Read_R_s32TempDiff
</UL>

<P><STRONG><a name="[92]"></a>FANCTRL_SCFG_s16ReadSecRecdiode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fanctrl.o(i.FANCTRL_SCFG_s16ReadSecRecdiode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FANCTRL_SCFG_s16ReadSecRecdiode
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_s16ReadTempValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_Rte_Read_R_s32TempDiff
</UL>

<P><STRONG><a name="[96]"></a>mg_AdjSpeed</STRONG> (Thumb, 634 bytes, Stack size 40 bytes, fanctrl.o(i.mg_AdjSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mg_AdjSpeed &rArr; FANCTRL_Rte_Read_R_s32TempDiff &rArr; FANCTRL_SCFG_s16ReadSecRecdiode
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUFFER_u16GetMean10ms
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPCTRL_s16ReadTempValue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_Rte_Read_R_s32TempDiff
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_RTE_Read_B_R_SYS_UNLOCK
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_vFanCtrl
</UL>

<P><STRONG><a name="[112]"></a>INTCOM_RTE_Read_B_R_VIN_OK_PRI</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, monctrl.o(i.INTCOM_RTE_Read_B_R_VIN_OK_PRI))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
</UL>

<P><STRONG><a name="[fd]"></a>MONCTRL_RTE_Read_B_R_NO_VIN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Read_B_R_NO_VIN))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vUpdateStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckStatusReset
</UL>

<P><STRONG><a name="[fc]"></a>MONCTRL_RTE_Read_B_R_REMOTE_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Read_B_R_REMOTE_ON))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckStatusReset
</UL>

<P><STRONG><a name="[10e]"></a>MONCTRL_RTE_Read_B_R_VIN_OV</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Read_B_R_VIN_OV))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vUpdateStatus
</UL>

<P><STRONG><a name="[10d]"></a>MONCTRL_RTE_Read_B_R_VIN_UV</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Read_B_R_VIN_UV))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vUpdateStatus
</UL>

<P><STRONG><a name="[108]"></a>MONCTRL_RTE_Read_B_R_VSB_MONI_EN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Read_B_R_VSB_MONI_EN))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVsbOutput
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckVsbOvp
</UL>

<P><STRONG><a name="[118]"></a>MONCTRL_RTE_Read_B_R_VSB_ON_DIO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Read_B_R_VSB_ON_DIO))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVsbOutput
</UL>

<P><STRONG><a name="[107]"></a>MONCTRL_RTE_Read_R_vVsbLinear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Read_R_vVsbLinear))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVsbOutput
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckVsbOvp
</UL>

<P><STRONG><a name="[10b]"></a>MONCTRL_RTE_Write_B_P_ANY_NTC_FAULT</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_ANY_NTC_FAULT))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vUpdateStatus
</UL>

<P><STRONG><a name="[105]"></a>MONCTRL_RTE_Write_B_P_CLEAR_LATCH_FAULT</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_CLEAR_LATCH_FAULT))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckStatusReset
</UL>

<P><STRONG><a name="[115]"></a>MONCTRL_RTE_Write_B_P_NO_VIN</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_NO_VIN))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
</UL>

<P><STRONG><a name="[10c]"></a>MONCTRL_RTE_Write_B_P_REMOTE_ON</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_REMOTE_ON))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vUpdateStatus
</UL>

<P><STRONG><a name="[111]"></a>MONCTRL_RTE_Write_B_P_VIN_OCW</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VIN_OCW))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
</UL>

<P><STRONG><a name="[116]"></a>MONCTRL_RTE_Write_B_P_VIN_OK</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VIN_OK))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
</UL>

<P><STRONG><a name="[104]"></a>MONCTRL_RTE_Write_B_P_VIN_OV</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VIN_OV))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckStatusReset
</UL>

<P><STRONG><a name="[103]"></a>MONCTRL_RTE_Write_B_P_VIN_UV</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VIN_UV))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckStatusReset
</UL>

<P><STRONG><a name="[113]"></a>MONCTRL_RTE_Write_B_P_VIN_UVW</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VIN_UVW))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
</UL>

<P><STRONG><a name="[ff]"></a>MONCTRL_RTE_Write_B_P_VSB_LATCH</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VSB_LATCH))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVsbOutput
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckVsbOvp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckStatusReset
</UL>

<P><STRONG><a name="[102]"></a>MONCTRL_RTE_Write_B_P_VSB_OCP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VSB_OCP))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVsbOutput
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckStatusReset
</UL>

<P><STRONG><a name="[11a]"></a>MONCTRL_RTE_Write_B_P_VSB_OCW</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VSB_OCW))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVsbOutput
</UL>

<P><STRONG><a name="[100]"></a>MONCTRL_RTE_Write_B_P_VSB_OVP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VSB_OVP))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckVsbOvp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckStatusReset
</UL>

<P><STRONG><a name="[109]"></a>MONCTRL_RTE_Write_B_P_VSB_OVW</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VSB_OVW))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVsbOutput
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckVsbOvp
</UL>

<P><STRONG><a name="[101]"></a>MONCTRL_RTE_Write_B_P_VSB_UVP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VSB_UVP))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVsbOutput
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vCheckStatusReset
</UL>

<P><STRONG><a name="[119]"></a>MONCTRL_RTE_Write_B_P_VSB_UVW</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_B_P_VSB_UVW))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVsbOutput
</UL>

<P><STRONG><a name="[fa]"></a>MONCTRL_RTE_Write_P_u8AcLineStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_RTE_Write_P_u8AcLineStatus))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vVin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vAxuModeDetect
</UL>

<P><STRONG><a name="[10f]"></a>MONCTRL_Rte_Write_B_P_STB_MODE</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, monctrl.o(i.MONCTRL_Rte_Write_B_P_STB_MODE))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MONCTRL_vUpdateStatus
</UL>

<P><STRONG><a name="[143]"></a>PSUCTRL_RTE_Read_B_R_AUX_MODE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_RTE_Read_B_R_AUX_MODE))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vVsbOut
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[144]"></a>PSUCTRL_RTE_Read_B_R_REMOTE_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_RTE_Read_B_R_REMOTE_ON))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[146]"></a>PSUCTRL_RTE_Read_B_R_STA_VSB_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_RTE_Read_B_R_STA_VSB_ON))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[149]"></a>PSUCTRL_RTE_Read_B_R_V1_FAULT_ACTIVE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_RTE_Read_B_R_V1_FAULT_ACTIVE))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vVsbOut
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[14b]"></a>PSUCTRL_RTE_Read_B_R_V1_OCP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_RTE_Read_B_R_V1_OCP))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[14a]"></a>PSUCTRL_RTE_Read_B_R_V1_OVP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_RTE_Read_B_R_V1_OVP))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[14c]"></a>PSUCTRL_RTE_Read_B_R_V1_UVP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_RTE_Read_B_R_V1_UVP))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[142]"></a>PSUCTRL_RTE_Read_B_R_VIN_OK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_RTE_Read_B_R_VIN_OK))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vVsbOut
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[150]"></a>PSUCTRL_RTE_Read_B_R_VSB_OCP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_RTE_Read_B_R_VSB_OCP))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vVsbOut
</UL>

<P><STRONG><a name="[145]"></a>PSUCTRL_Rte_Read_B_R_TEMP_ANY_OTP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_Rte_Read_B_R_TEMP_ANY_OTP))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[141]"></a>PSUCTRL_Rte_Write_B_P_OUTPUT_OK</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_Rte_Write_B_P_OUTPUT_OK))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[13e]"></a>PSUCTRL_Rte_Write_B_P_STA_V1_ON</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_Rte_Write_B_P_STA_V1_ON))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[14e]"></a>PSUCTRL_Rte_Write_B_P_STA_VSB_ON</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_Rte_Write_B_P_STA_VSB_ON))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vVsbOut
</UL>

<P><STRONG><a name="[13f]"></a>PSUCTRL_Rte_Write_B_P_TURN_ON_MAIN</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_Rte_Write_B_P_TURN_ON_MAIN))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[140]"></a>PSUCTRL_Rte_Write_B_P_V1_MONI_EN</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_Rte_Write_B_P_V1_MONI_EN))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vV1Out
</UL>

<P><STRONG><a name="[14f]"></a>PSUCTRL_Rte_Write_B_P_VSB_MONI_EN</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_Rte_Write_B_P_VSB_MONI_EN))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vVsbOut
</UL>

<P><STRONG><a name="[13c]"></a>PSUCTRL_Rte_Write_P_u16TrimV1Gain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_Rte_Write_P_u16TrimV1Gain))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vTrim
</UL>

<P><STRONG><a name="[13b]"></a>PSUCTRL_Rte_Write_P_u16TrimV1GainAct</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_Rte_Write_P_u16TrimV1GainAct))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vTrim
</UL>

<P><STRONG><a name="[13a]"></a>PSUCTRL_Rte_Write_P_u16TrimV1GainOvp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psuctrl.o(i.PSUCTRL_Rte_Write_P_u16TrimV1GainOvp))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vTrim
</UL>

<P><STRONG><a name="[135]"></a>PSUCTRL_SCFG_vVsbOvpDuty</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, psuctrl.o(i.PSUCTRL_SCFG_vVsbOvpDuty))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PSUCTRL_SCFG_vVsbOvpDuty &rArr; PWM_vPwmDutyUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_vPwmDutyUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vTrim
</UL>

<P><STRONG><a name="[137]"></a>PSUCTRL_SCFG_vVsbSetOn</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, psuctrl.o(i.PSUCTRL_SCFG_vVsbSetOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PSUCTRL_SCFG_vVsbSetOn &rArr; PORT_vSetGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vSetGpioPin
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vSetGpioMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSUCTRL_vVsbOut
</UL>

<P><STRONG><a name="[2c]"></a>TEMPCTRL_Rte_Read_R_u161mVLlcNtc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tempctrl.o(i.TEMPCTRL_Rte_Read_R_u161mVLlcNtc))
<BR>[Address Reference Count : 1]<UL><LI> tempctrl.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>TEMPCTRL_Rte_Read_R_u161mVPfcNtc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tempctrl.o(i.TEMPCTRL_Rte_Read_R_u161mVPfcNtc))
<BR>[Address Reference Count : 1]<UL><LI> tempctrl.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>TEMPCTRL_Rte_Read_R_u161mVSrNtc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tempctrl.o(i.TEMPCTRL_Rte_Read_R_u161mVSrNtc))
<BR>[Address Reference Count : 1]<UL><LI> tempctrl.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>TEMPCTRL_SCFG_u16ReadInletNtc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tempctrl.o(i.TEMPCTRL_SCFG_u16ReadInletNtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEMPCTRL_SCFG_u16ReadInletNtc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vReadRaw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tempctrl.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>TEMPCTRL_SCFG_u16ReadOutletNtc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tempctrl.o(i.TEMPCTRL_SCFG_u16ReadOutletNtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEMPCTRL_SCFG_u16ReadOutletNtc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_vReadRaw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tempctrl.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>LEDCTRL_RTE_Read_B_R_Aux_Mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ledctrl.o(i.LEDCTRL_RTE_Read_B_R_Aux_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vLedControl
</UL>

<P><STRONG><a name="[e7]"></a>LEDCTRL_RTE_Read_B_R_V1_OCP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ledctrl.o(i.LEDCTRL_RTE_Read_B_R_V1_OCP))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vLedControl
</UL>

<P><STRONG><a name="[e6]"></a>LEDCTRL_RTE_Read_B_R_V1_OVP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ledctrl.o(i.LEDCTRL_RTE_Read_B_R_V1_OVP))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vLedControl
</UL>

<P><STRONG><a name="[e8]"></a>LEDCTRL_RTE_Read_B_R_V1_UVP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ledctrl.o(i.LEDCTRL_RTE_Read_B_R_V1_UVP))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vLedControl
</UL>

<P><STRONG><a name="[e5]"></a>LEDCTRL_RTE_Read_B_R_VIN_OK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ledctrl.o(i.LEDCTRL_RTE_Read_B_R_VIN_OK))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vLedControl
</UL>

<P><STRONG><a name="[e1]"></a>LEDCTRL_SCFG_vSetInREDOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ledctrl.o(i.LEDCTRL_SCFG_vSetInREDOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEDCTRL_SCFG_vSetInREDOff &rArr; PORT_vSetGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vSetGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vLedControl
</UL>

<P><STRONG><a name="[e2]"></a>LEDCTRL_SCFG_vSetInREDOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ledctrl.o(i.LEDCTRL_SCFG_vSetInREDOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEDCTRL_SCFG_vSetInREDOn &rArr; PORT_vSetGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_vSetGpioPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDCTRL_vLedControl
</UL>

<P><STRONG><a name="[193]"></a>TIMECATL_SCFG_u8GetCrc8</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timectrl.o(i.TIMECATL_SCFG_u8GetCrc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMECATL_SCFG_u8GetCrc8
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_u8GetCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vSaveHoursUsed
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vInit
</UL>

<P><STRONG><a name="[194]"></a>TIMECATL_SCFG_vWriteMem</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timectrl.o(i.TIMECATL_SCFG_vWriteMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TIMECATL_SCFG_vWriteMem &rArr; EEPROM_u32WriteBuffer &rArr; EEPROM_u32WritePage &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_u32WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vSaveHoursUsed
</UL>

<P><STRONG><a name="[199]"></a>TIMECTRL_RTE_Write_B_P_PSO_LAST_UPDTING</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timectrl.o(i.TIMECTRL_RTE_Write_B_P_PSO_LAST_UPDTING))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vSaveHoursUsed
</UL>

<P><STRONG><a name="[198]"></a>TIMECTRL_RTE_Write_B_P_PSO_TOTAL_UPDTING</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timectrl.o(i.TIMECTRL_RTE_Write_B_P_PSO_TOTAL_UPDTING))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vSaveHoursUsed
</UL>

<P><STRONG><a name="[196]"></a>TIMECTRL_RTE_Write_P_u32PosTotal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timectrl.o(i.TIMECTRL_RTE_Write_P_u32PosTotal))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vSaveHoursUsed
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vInit
</UL>

<P><STRONG><a name="[197]"></a>TIMECTRL_RTE_Write_P_vDataCopy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timectrl.o(i.TIMECTRL_RTE_Write_P_vDataCopy))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vSaveHoursUsed
</UL>

<P><STRONG><a name="[19a]"></a>TIMECTRL_RTE_Write_P_vWrBitHoursUpd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timectrl.o(i.TIMECTRL_RTE_Write_P_vWrBitHoursUpd))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vSaveHoursUsed
</UL>

<P><STRONG><a name="[195]"></a>TIMECTRL_RTE_Write_P_vWrHoursUsed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timectrl.o(i.TIMECTRL_RTE_Write_P_vWrHoursUsed))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vSaveHoursUsed
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMECTRL_vInit
</UL>

<P><STRONG><a name="[df]"></a>INTCOM_RTE_Read_B_R_VIN_OK_ACTIVE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, intcom.o(i.INTCOM_RTE_Read_B_R_VIN_OK_ACTIVE))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vTmOutMon
</UL>

<P><STRONG><a name="[e0]"></a>INTCOM_RTE_Write_B_P_COMMS_FAULT</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, intcom.o(i.INTCOM_RTE_Write_B_P_COMMS_FAULT))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vTmOutMon
</UL>

<P><STRONG><a name="[d7]"></a>INTCOM_RTE_Write_B_P_PRI_NO_RX_PKG</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, intcom.o(i.INTCOM_RTE_Write_B_P_PRI_NO_RX_PKG))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vTmOutMon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom1RxData
</UL>

<P><STRONG><a name="[d8]"></a>INTCOM_RTE_Write_B_P_PRI_RX_PKG</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, intcom.o(i.INTCOM_RTE_Write_B_P_PRI_RX_PKG))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vTmOutMon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom1RxData
</UL>

<P><STRONG><a name="[d6]"></a>INTCOM_RTE_Write_B_P_PRI_UART_FAIL</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, intcom.o(i.INTCOM_RTE_Write_B_P_PRI_UART_FAIL))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vTmOutMon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom1RxData
</UL>

<P><STRONG><a name="[dd]"></a>INTCOM_RTE_Write_B_P_SEC_NO_RX_PKG</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, intcom.o(i.INTCOM_RTE_Write_B_P_SEC_NO_RX_PKG))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vTmOutMon
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom2RxData
</UL>

<P><STRONG><a name="[dc]"></a>INTCOM_RTE_Write_B_P_SEC_UART_FAIL</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, intcom.o(i.INTCOM_RTE_Write_B_P_SEC_UART_FAIL))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vTmOutMon
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom2RxData
</UL>

<P><STRONG><a name="[db]"></a>INTCOM_Rte_Write_B_P_V1_OCP</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, intcom.o(i.INTCOM_Rte_Write_B_P_V1_OCP))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom2RxData
</UL>

<P><STRONG><a name="[d9]"></a>INTCOM_Rte_Write_P_u16FanCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, intcom.o(i.INTCOM_Rte_Write_P_u16FanCnt))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTCOM_vCom1RxData
</UL>

<P><STRONG><a name="[54]"></a>BLABOX_Rte_Read_B_R_AC_POWER_FAULT</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, blabox.o(i.BLABOX_Rte_Read_B_R_AC_POWER_FAULT))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_CheckACBlackBox
</UL>

<P><STRONG><a name="[53]"></a>BLABOX_Rte_Read_B_R_AUX_MODE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, blabox.o(i.BLABOX_Rte_Read_B_R_AUX_MODE))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_TimePSONBlackBox
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_CheckPSONBlackBox
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_CheckACBlackBox
</UL>

<P><STRONG><a name="[43]"></a>BLABOX_Rte_Read_B_R_FAN_WARN</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, blabox.o(i.BLABOX_Rte_Read_B_R_FAN_WARN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLABOX_Rte_Read_B_R_FAN_WARN
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FANCTRL_u8ReadFanBitWarn
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vClearWarning
</UL>

<P><STRONG><a name="[61]"></a>BLABOX_Rte_Read_B_R_IOUT_OC_FAULT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, blabox.o(i.BLABOX_Rte_Read_B_R_IOUT_OC_FAULT))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
</UL>

<P><STRONG><a name="[4e]"></a>BLABOX_Rte_Read_B_R_IOUT_WARN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, blabox.o(i.BLABOX_Rte_Read_B_R_IOUT_WARN))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vClearWarning
</UL>

<P><STRONG><a name="[64]"></a>BLABOX_Rte_Read_B_R_LOSS_INPUT</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, blabox.o(i.BLABOX_Rte_Read_B_R_LOSS_INPUT))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrSetPSONCntBlackBox
</UL>

<P><STRONG><a name="[63]"></a>BLABOX_Rte_Read_B_R_OT_FAULT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, blabox.o(i.BLABOX_Rte_Read_B_R_OT_FAULT))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
</UL>

<P><STRONG><a name="[57]"></a>BLABOX_Rte_Read_B_R_PSON_FAULT</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, blabox.o(i.BLABOX_Rte_Read_B_R_PSON_FAULT))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_TimePSONBlackBox
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_CheckPSONBlackBox
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrSetACCntBlackBox
</UL>

<P><STRONG><a name="[4f]"></a>BLABOX_Rte_Read_B_R_TEMP_WARN</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, blabox.o(i.BLABOX_Rte_Read_B_R_TEMP_WARN))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vClearWarning
</UL>

<P><STRONG><a name="[45]"></a>BLABOX_SCFG_Read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, blabox.o(i.BLABOX_SCFG_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_bRead
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_ClearBlackBox
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrBlaboxHeader
</UL>

<P><STRONG><a name="[47]"></a>BLABOX_SCFG_Write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, blabox.o(i.BLABOX_SCFG_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BLABOX_SCFG_Write &rArr; S_DAM_bWrite &rArr; S_DAM_SCFG_bWrite &rArr; MEM_vWriteToMem
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_bWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_TimePSONBlackBox
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vSetEnableBlackbox
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_SystemBlackBox
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_ClearBlackBox
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrSetPSONCntBlackBox
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrSetACCntBlackBox
</UL>

<P><STRONG><a name="[49]"></a>BLABOX_SCFG_u16Getlenght</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, blabox.o(i.BLABOX_SCFG_u16Getlenght))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLABOX_SCFG_u16Getlenght
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_u16Getlenght
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vInit
</UL>

<P><STRONG><a name="[4b]"></a>BLABOX_SCFG_u32GetLastRecordId</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, blabox.o(i.BLABOX_SCFG_u32GetLastRecordId))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BLABOX_SCFG_u32GetLastRecordId &rArr; S_DAM_u32GetLastRecordId &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S_DAM_u32GetLastRecordId
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
</UL>

<P><STRONG><a name="[5e]"></a>mg_u8IsMaxCountEventFaultAndWarning</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, blabox.o(i.mg_u8IsMaxCountEventFaultAndWarning))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mg_u8IsMaxCountEventFaultAndWarning
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
</UL>

<P><STRONG><a name="[1b6]"></a>mg_vMfrGetACCntBlackBox</STRONG> (Thumb, 28 bytes, Stack size 56 bytes, blabox.o(i.mg_vMfrGetACCntBlackBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mg_vMfrGetACCntBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrBlaboxHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vPushEventFaultBlackBox
</UL>

<P><STRONG><a name="[1b7]"></a>mg_vMfrGetPSONCntBlackBox</STRONG> (Thumb, 28 bytes, Stack size 56 bytes, blabox.o(i.mg_vMfrGetPSONCntBlackBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mg_vMfrGetPSONCntBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrBlaboxHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vPushEventFaultBlackBox
</UL>

<P><STRONG><a name="[1b8]"></a>mg_vMfrGetTimePSONBlackBox</STRONG> (Thumb, 34 bytes, Stack size 56 bytes, blabox.o(i.mg_vMfrGetTimePSONBlackBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = mg_vMfrGetTimePSONBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrBlaboxHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vPushEventFaultBlackBox
</UL>

<P><STRONG><a name="[55]"></a>mg_vMfrSetACCntBlackBox</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, blabox.o(i.mg_vMfrSetACCntBlackBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mg_vMfrSetACCntBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrBlaboxHeader
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Write
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_PSON_FAULT
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_CheckACBlackBox
</UL>

<P><STRONG><a name="[58]"></a>mg_vMfrSetPSONCntBlackBox</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, blabox.o(i.mg_vMfrSetPSONCntBlackBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mg_vMfrSetPSONCntBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vReadMfrBlaboxHeader
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_Rte_Read_B_R_LOSS_INPUT
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_CheckPSONBlackBox
</UL>

<P><STRONG><a name="[5f]"></a>mg_vPushEventFaultBlackBox</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, blabox.o(i.mg_vPushEventFaultBlackBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mg_vPushEventFaultBlackBox &rArr; mg_vMfrGetTimePSONBlackBox &rArr; mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMBUS_vSaveBlackBoxData2Buff
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrGetTimePSONBlackBox
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrGetPSONCntBlackBox
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrGetACCntBlackBox
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
</UL>

<P><STRONG><a name="[5a]"></a>mg_vReadMfrBlaboxHeader</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, blabox.o(i.mg_vReadMfrBlaboxHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mg_vReadMfrBlaboxHeader &rArr; BLABOX_SCFG_Read &rArr; S_DAM_bRead &rArr; S_DAM_SCFG_bRead &rArr; MEM_vReadFromMem
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_SCFG_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_TimePSONBlackBox
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_SystemBlackBox
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vMFR_ClearBlackBox
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrSetPSONCntBlackBox
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrSetACCntBlackBox
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrGetTimePSONBlackBox
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrGetPSONCntBlackBox
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mg_vMfrGetACCntBlackBox
</UL>

<P><STRONG><a name="[60]"></a>mg_vSetCountEventFaultAndWarning</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, blabox.o(i.mg_vSetCountEventFaultAndWarning))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mg_vSetCountEventFaultAndWarning
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLABOX_vProcessBlackbox
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
